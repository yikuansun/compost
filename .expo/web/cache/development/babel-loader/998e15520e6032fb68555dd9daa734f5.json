{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/yichen/Git/compost/GoCompost/node_modules/react-native-elements/src/config/ThemeProvider.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\nimport colors from \"./colors\";\nimport darkColors from \"./colorsDark\";\nexport var ThemeContext = React.createContext({\n  theme: {\n    colors: colors\n  }\n});\n\nvar ThemeProvider = function (_React$Component) {\n  _inherits(ThemeProvider, _React$Component);\n\n  var _super = _createSuper(ThemeProvider);\n\n  function ThemeProvider(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeProvider);\n\n    _this = _super.call(this, props);\n\n    _this.updateTheme = function (updates) {\n      _this.setState(function (_ref) {\n        var theme = _ref.theme;\n        return {\n          theme: deepmerge(theme, updates)\n        };\n      });\n    };\n\n    _this.replaceTheme = function (theme) {\n      _this.setState(function () {\n        return {\n          theme: deepmerge(_this.defaultTheme, theme)\n        };\n      });\n    };\n\n    _this.getTheme = function () {\n      return _this.state.theme;\n    };\n\n    var defaultColors = props.useDark ? darkColors : colors;\n    _this.defaultTheme = deepmerge({\n      colors: defaultColors\n    }, props.theme);\n    _this.state = {\n      theme: _this.defaultTheme\n    };\n    return _this;\n  }\n\n  _createClass(ThemeProvider, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ThemeContext.Provider, {\n        value: {\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return ThemeProvider;\n}(React.Component);\n\nexport { ThemeProvider as default };\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  useDark: PropTypes.bool\n};\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false\n};\nexport var ThemeConsumer = ThemeContext.Consumer;","map":{"version":3,"sources":["/home/yichen/Git/compost/GoCompost/node_modules/react-native-elements/src/config/ThemeProvider.js"],"names":["React","PropTypes","deepmerge","colors","darkColors","ThemeContext","createContext","theme","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","defaultColors","useDark","children","Component","propTypes","object","node","isRequired","bool","defaultProps","ThemeConsumer","Consumer"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAOC,MAAP;AACA,OAAOC,UAAP;AAEA,OAAO,IAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,CAAoB;AAC9CC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,MAAM,EAANA;AADK;AADuC,CAApB,CAArB;;IAMcK,a;;;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAgBnBC,WAhBmB,GAgBL,UAACC,OAAD,EAAa;AACzB,YAAKC,QAAL,CAAc;AAAA,YAAGL,KAAH,QAAGA,KAAH;AAAA,eAAgB;AAC5BA,UAAAA,KAAK,EAAEL,SAAS,CAACK,KAAD,EAAQI,OAAR;AADY,SAAhB;AAAA,OAAd;AAGD,KApBkB;;AAAA,UAsBnBE,YAtBmB,GAsBJ,UAACN,KAAD,EAAW;AACxB,YAAKK,QAAL,CAAc;AAAA,eAAO;AACnBL,UAAAA,KAAK,EAAEL,SAAS,CAAC,MAAKY,YAAN,EAAoBP,KAApB;AADG,SAAP;AAAA,OAAd;AAGD,KA1BkB;;AAAA,UA4BnBQ,QA5BmB,GA4BR;AAAA,aAAM,MAAKC,KAAL,CAAWT,KAAjB;AAAA,KA5BQ;;AAGjB,QAAMU,aAAa,GAAGR,KAAK,CAACS,OAAN,GAAgBd,UAAhB,GAA6BD,MAAnD;AAEA,UAAKW,YAAL,GAAoBZ,SAAS,CAC3B;AACEC,MAAAA,MAAM,EAAEc;AADV,KAD2B,EAI3BR,KAAK,CAACF,KAJqB,CAA7B;AAMA,UAAKS,KAAL,GAAa;AACXT,MAAAA,KAAK,EAAE,MAAKO;AADD,KAAb;AAXiB;AAclB;;;;6BAgBQ;AACP,aACE,oBAAC,YAAD,CAAc,QAAd;AACE,QAAA,KAAK,EAAE;AACLP,UAAAA,KAAK,EAAE,KAAKS,KAAL,CAAWT,KADb;AAELG,UAAAA,WAAW,EAAE,KAAKA,WAFb;AAGLG,UAAAA,YAAY,EAAE,KAAKA;AAHd,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOG,KAAKJ,KAAL,CAAWU,QAPd,CADF;AAWD;;;;EA3CwCnB,KAAK,CAACoB,S;;SAA5BZ,a;AA8CrBA,aAAa,CAACa,SAAd,GAA0B;AACxBd,EAAAA,KAAK,EAAEN,SAAS,CAACqB,MADO;AAExBH,EAAAA,QAAQ,EAAElB,SAAS,CAACsB,IAAV,CAAeC,UAFD;AAGxBN,EAAAA,OAAO,EAAEjB,SAAS,CAACwB;AAHK,CAA1B;AAMAjB,aAAa,CAACkB,YAAd,GAA6B;AAC3BnB,EAAAA,KAAK,EAAE,EADoB;AAE3BW,EAAAA,OAAO,EAAE;AAFkB,CAA7B;AAKA,OAAO,IAAMS,aAAa,GAAGtB,YAAY,CAACuB,QAAnC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\n\nimport colors from './colors';\nimport darkColors from './colorsDark';\n\nexport const ThemeContext = React.createContext({\n  theme: {\n    colors,\n  },\n});\n\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const defaultColors = props.useDark ? darkColors : colors;\n\n    this.defaultTheme = deepmerge(\n      {\n        colors: defaultColors,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n    };\n  }\n\n  updateTheme = (updates) => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = (theme) => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  useDark: PropTypes.bool,\n};\n\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false,\n};\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]},"metadata":{},"sourceType":"module"}