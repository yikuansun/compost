{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _jsxFileName = \"/home/yichen/Git/compost/GoCompost/node_modules/react-native-elements/src/slider/Slider.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { withTheme } from \"../config\";\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\nvar TRACK_STYLE = Platform.select({\n  web: 0,\n  default: -1\n});\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0\n  }\n};\n\nvar getBoundedValue = function getBoundedValue(value, maximumValue, minimumValue) {\n  return Math.max(Math.min(value, maximumValue), minimumValue);\n};\n\nvar Rect = function () {\n  function Rect(x, y, width, height) {\n    _classCallCheck(this, Rect);\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  _createClass(Rect, [{\n    key: \"containsPoint\",\n    value: function containsPoint(x, y) {\n      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n    }\n  }]);\n\n  return Rect;\n}();\n\nvar Slider = function (_React$Component) {\n  _inherits(Slider, _React$Component);\n\n  var _super = _createSuper(Slider);\n\n  function Slider(props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _super.call(this, props);\n\n    _this.measureContainer = function (x) {\n      _this.handleMeasure('containerSize', x);\n    };\n\n    _this.measureTrack = function (x) {\n      _this.handleMeasure('trackSize', x);\n    };\n\n    _this.measureThumb = function (x) {\n      _this.handleMeasure('thumbSize', x);\n    };\n\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new Animated.Value(getBoundedValue(props.value, props.maximumValue, props.minimumValue))\n    };\n    _this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: _this.handleStartShouldSetPanResponder.bind(_assertThisInitialized(_this)),\n      onMoveShouldSetPanResponder: _this.handleMoveShouldSetPanResponder.bind(_assertThisInitialized(_this)),\n      onPanResponderGrant: _this.handlePanResponderGrant.bind(_assertThisInitialized(_this)),\n      onPanResponderMove: _this.handlePanResponderMove.bind(_assertThisInitialized(_this)),\n      onPanResponderRelease: _this.handlePanResponderEnd.bind(_assertThisInitialized(_this)),\n      onPanResponderTerminationRequest: _this.handlePanResponderRequestEnd.bind(_assertThisInitialized(_this)),\n      onPanResponderTerminate: _this.handlePanResponderEnd.bind(_assertThisInitialized(_this))\n    });\n    _this.isVertical = props.orientation === 'vertical';\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var newValue = getBoundedValue(this.props.value, this.props.maximumValue, this.props.minimumValue);\n\n      if (prevProps.value !== newValue) {\n        if (this.props.animateTransitions) {\n          this.setCurrentValueAnimated(newValue);\n        } else {\n          this.setCurrentValue(newValue);\n        }\n      }\n    }\n  }, {\n    key: \"setCurrentValue\",\n    value: function setCurrentValue(value) {\n      this.state.value.setValue(value);\n    }\n  }, {\n    key: \"setCurrentValueAnimated\",\n    value: function setCurrentValueAnimated(value) {\n      var animationType = this.props.animationType;\n\n      var animationConfig = _extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {\n        toValue: value\n      });\n\n      Animated[animationType](this.state.value, animationConfig).start();\n    }\n  }, {\n    key: \"handleMoveShouldSetPanResponder\",\n    value: function handleMoveShouldSetPanResponder() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderGrant\",\n    value: function handlePanResponderGrant() {\n      this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n      this.fireChangeEvent('onSlidingStart');\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onValueChange');\n    }\n  }, {\n    key: \"handlePanResponderRequestEnd\",\n    value: function handlePanResponderRequestEnd() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onSlidingComplete');\n    }\n  }, {\n    key: \"thumbHitTest\",\n    value: function thumbHitTest(_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      var thumbTouchRect = this.getThumbTouchRect();\n      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n    }\n  }, {\n    key: \"handleStartShouldSetPanResponder\",\n    value: function handleStartShouldSetPanResponder(e) {\n      if (!this.props.allowTouchTrack) {\n        return this.thumbHitTest(e);\n      }\n\n      this.setCurrentValue(this.getOnTouchValue(e));\n      this.fireChangeEvent('onValueChange');\n      return true;\n    }\n  }, {\n    key: \"fireChangeEvent\",\n    value: function fireChangeEvent(event) {\n      if (this.props[event]) {\n        this.props[event](this.getCurrentValue());\n      }\n    }\n  }, {\n    key: \"getOnTouchValue\",\n    value: function getOnTouchValue(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var location = this.isVertical ? nativeEvent.locationY : nativeEvent.locationX;\n      return this.getValueForTouch(location);\n    }\n  }, {\n    key: \"getValueForTouch\",\n    value: function getValueForTouch(location) {\n      var length = this.state.containerSize.width - this.state.thumbSize.width;\n      var ratio = location / length;\n      var newValue = ratio * (this.props.maximumValue - this.props.minimumValue);\n\n      if (this.props.step) {\n        newValue = Math.round(newValue / this.props.step) * this.props.step;\n      }\n\n      return getBoundedValue(newValue + this.props.minimumValue, this.props.maximumValue, this.props.minimumValue);\n    }\n  }, {\n    key: \"getTouchOverflowSize\",\n    value: function getTouchOverflowSize() {\n      var _this$state = this.state,\n          thumbSize = _this$state.thumbSize,\n          allMeasured = _this$state.allMeasured,\n          containerSize = _this$state.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var size = {};\n\n      if (allMeasured === true) {\n        size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n        size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n      }\n\n      return size;\n    }\n  }, {\n    key: \"getTouchOverflowStyle\",\n    value: function getTouchOverflowStyle() {\n      var _this$getTouchOverflo = this.getTouchOverflowSize(),\n          width = _this$getTouchOverflo.width,\n          height = _this$getTouchOverflo.height;\n\n      var touchOverflowStyle = {};\n\n      if (width !== undefined && height !== undefined) {\n        var verticalMargin = -height / 2;\n        touchOverflowStyle.marginTop = verticalMargin;\n        touchOverflowStyle.marginBottom = verticalMargin;\n        var horizontalMargin = -width / 2;\n        touchOverflowStyle.marginLeft = horizontalMargin;\n        touchOverflowStyle.marginRight = horizontalMargin;\n      }\n\n      if (this.props.debugTouchArea === true) {\n        touchOverflowStyle.backgroundColor = 'orange';\n        touchOverflowStyle.opacity = 0.5;\n      }\n\n      return touchOverflowStyle;\n    }\n  }, {\n    key: \"handleMeasure\",\n    value: function handleMeasure(name, x) {\n      var _x$nativeEvent$layout = x.nativeEvent.layout,\n          layoutWidth = _x$nativeEvent$layout.width,\n          layoutHeight = _x$nativeEvent$layout.height;\n      var width = this.isVertical ? layoutHeight : layoutWidth;\n      var height = this.isVertical ? layoutWidth : layoutHeight;\n      var size = {\n        width: width,\n        height: height\n      };\n      var storeName = \"_\" + name;\n      var currentSize = this[storeName];\n\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n\n      this[storeName] = size;\n\n      if (this._containerSize && this._trackSize && this._thumbSize) {\n        this.setState({\n          containerSize: this._containerSize,\n          trackSize: this._trackSize,\n          thumbSize: this._thumbSize,\n          allMeasured: true\n        });\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(gestureState) {\n      var location = this._previousLeft + (this.isVertical ? gestureState.dy : gestureState.dx);\n      return this.getValueForTouch(location);\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this.state.value.__getValue();\n    }\n  }, {\n    key: \"getRatio\",\n    value: function getRatio(value) {\n      return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n    }\n  }, {\n    key: \"getThumbLeft\",\n    value: function getThumbLeft(value) {\n      var ratio = this.getRatio(value);\n      return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n    }\n  }, {\n    key: \"getThumbTouchRect\",\n    value: function getThumbTouchRect() {\n      var _this$state2 = this.state,\n          thumbSize = _this$state2.thumbSize,\n          containerSize = _this$state2.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var touchOverflowSize = this.getTouchOverflowSize();\n      var height = touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2;\n      var width = touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2;\n\n      if (this.isVertical) {\n        return new Rect(height, width, thumbTouchSize.width, thumbTouchSize.height);\n      }\n\n      return new Rect(width, height, thumbTouchSize.width, thumbTouchSize.height);\n    }\n  }, {\n    key: \"renderDebugThumbTouchRect\",\n    value: function renderDebugThumbTouchRect(thumbLeft) {\n      var thumbTouchRect = this.getThumbTouchRect();\n      var positionStyle = {\n        left: thumbLeft,\n        top: thumbTouchRect.y,\n        width: thumbTouchRect.width,\n        height: thumbTouchRect.height\n      };\n      return React.createElement(Animated.View, {\n        style: positionStyle,\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"getMinimumTrackStyles\",\n    value: function getMinimumTrackStyles(thumbStart) {\n      var _this$state3 = this.state,\n          thumbSize = _this$state3.thumbSize,\n          trackSize = _this$state3.trackSize;\n      var minimumTrackStyle = {\n        position: 'absolute'\n      };\n\n      if (this.isVertical) {\n        minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n        minimumTrackStyle.marginLeft = trackSize.width * TRACK_STYLE;\n      } else {\n        minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n        minimumTrackStyle.marginTop = trackSize.height * TRACK_STYLE;\n      }\n\n      return minimumTrackStyle;\n    }\n  }, {\n    key: \"getThumbPositionStyles\",\n    value: function getThumbPositionStyles(thumbStart) {\n      return [_defineProperty({}, this.isVertical ? 'translateY' : 'translateX', thumbStart)];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          minimumValue = _this$props.minimumValue,\n          maximumValue = _this$props.maximumValue,\n          minimumTrackTintColor = _this$props.minimumTrackTintColor,\n          maximumTrackTintColor = _this$props.maximumTrackTintColor,\n          thumbTintColor = _this$props.thumbTintColor,\n          containerStyle = _this$props.containerStyle,\n          style = _this$props.style,\n          trackStyle = _this$props.trackStyle,\n          thumbStyle = _this$props.thumbStyle,\n          thumbProps = _this$props.thumbProps,\n          debugTouchArea = _this$props.debugTouchArea,\n          orientation = _this$props.orientation,\n          other = _objectWithoutProperties(_this$props, [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"containerStyle\", \"style\", \"trackStyle\", \"thumbStyle\", \"thumbProps\", \"debugTouchArea\", \"orientation\"]);\n\n      var _this$state4 = this.state,\n          value = _this$state4.value,\n          containerSize = _this$state4.containerSize,\n          thumbSize = _this$state4.thumbSize,\n          allMeasured = _this$state4.allMeasured;\n      var mainStyles = containerStyle || styles;\n      var appliedTrackStyle = StyleSheet.flatten([styles.track, trackStyle]);\n      var thumbStart = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width]\n      });\n      var valueVisibleStyle = {};\n\n      if (!allMeasured) {\n        valueVisibleStyle.height = 0;\n        valueVisibleStyle.width = 0;\n      }\n\n      var minimumTrackStyle = _objectSpread(_objectSpread({}, this.getMinimumTrackStyles(thumbStart)), {}, {\n        backgroundColor: minimumTrackTintColor\n      }, valueVisibleStyle);\n\n      var touchOverflowStyle = this.getTouchOverflowStyle();\n      return React.createElement(View, _extends({}, other, {\n        style: StyleSheet.flatten([this.isVertical ? mainStyles.containerVertical : mainStyles.containerHorizontal, style]),\n        onLayout: this.measureContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        style: StyleSheet.flatten([mainStyles.track, this.isVertical ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, {\n          backgroundColor: maximumTrackTintColor\n        }]),\n        onLayout: this.measureTrack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        style: StyleSheet.flatten([mainStyles.track, this.isVertical ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, minimumTrackStyle]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 9\n        }\n      }), React.createElement(SliderThumb, _extends({\n        isVisible: allMeasured,\n        onLayout: this.measureThumb.bind(this),\n        style: thumbStyle,\n        color: thumbTintColor,\n        start: thumbStart,\n        vertical: this.isVertical\n      }, thumbProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 9\n        }\n      })), React.createElement(View, _extends({\n        style: StyleSheet.flatten([styles.touchArea, touchOverflowStyle])\n      }, this.panResponder.panHandlers, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 9\n        }\n      }), debugTouchArea === true && this.renderDebugThumbTouchRect(thumbStart)));\n    }\n  }]);\n\n  return Slider;\n}(React.Component);\n\nvar SliderThumb = function SliderThumb(_ref4) {\n  var Component = _ref4.Component,\n      isVisible = _ref4.isVisible,\n      onLayout = _ref4.onLayout,\n      style = _ref4.style,\n      start = _ref4.start,\n      color = _ref4.color,\n      vertical = _ref4.vertical,\n      props = _objectWithoutProperties(_ref4, [\"Component\", \"isVisible\", \"onLayout\", \"style\", \"start\", \"color\", \"vertical\"]);\n\n  var ThumbComponent = Component || Animated.View;\n  var axis = vertical ? 'translateY' : 'translateX';\n  var thumbPosition = [_defineProperty({}, axis, start)];\n  var styleTransform = style && style.transform || [];\n  var visibleStyle = isVisible ? {} : {\n    height: 0,\n    width: 0\n  };\n  return React.createElement(ThumbComponent, _extends({\n    testID: \"sliderThumb\",\n    onLayout: onLayout,\n    style: StyleSheet.flatten([_objectSpread({\n      backgroundColor: color,\n      transform: [].concat(thumbPosition, _toConsumableArray(styleTransform))\n    }, visibleStyle), styles.thumb, style])\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 5\n    }\n  }));\n};\n\nSlider.propTypes = {\n  value: PropTypes.number,\n  disabled: PropTypes.bool,\n  minimumValue: PropTypes.number,\n  maximumValue: PropTypes.number,\n  step: PropTypes.number,\n  minimumTrackTintColor: PropTypes.string,\n  maximumTrackTintColor: PropTypes.string,\n  allowTouchTrack: PropTypes.bool,\n  thumbTintColor: PropTypes.string,\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  onValueChange: PropTypes.func,\n  onSlidingStart: PropTypes.func,\n  onSlidingComplete: PropTypes.func,\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  trackStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  thumbStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  thumbProps: PropTypes.object,\n  debugTouchArea: PropTypes.bool,\n  animateTransitions: PropTypes.bool,\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  animationConfig: PropTypes.object,\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array])\n};\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  allowTouchTrack: false,\n  thumbTintColor: 'red',\n  thumbTouchSize: {\n    width: 40,\n    height: 40\n  },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal'\n};\nvar styles = StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5\n  }\n});\nexport { Slider };\nexport default withTheme(Slider, 'Slider');","map":{"version":3,"sources":["/home/yichen/Git/compost/GoCompost/node_modules/react-native-elements/src/slider/Slider.js"],"names":["React","PropTypes","withTheme","TRACK_SIZE","THUMB_SIZE","TRACK_STYLE","Platform","select","web","default","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","getBoundedValue","value","maximumValue","minimumValue","Math","max","min","Rect","x","y","width","height","Slider","props","measureContainer","handleMeasure","measureTrack","measureThumb","state","containerSize","trackSize","thumbSize","allMeasured","Animated","Value","panResponder","PanResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","isVertical","orientation","prevProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","_previousLeft","getThumbLeft","getCurrentValue","fireChangeEvent","_","gestureState","disabled","getValue","nativeEvent","thumbTouchRect","getThumbTouchRect","containsPoint","locationX","locationY","e","allowTouchTrack","thumbHitTest","getOnTouchValue","event","location","getValueForTouch","length","ratio","step","round","thumbTouchSize","size","getTouchOverflowSize","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","name","layout","layoutWidth","layoutHeight","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","dy","dx","__getValue","getRatio","touchOverflowSize","thumbLeft","positionStyle","left","top","thumbStart","minimumTrackStyle","position","add","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","thumbProps","other","mainStyles","styles","appliedTrackStyle","StyleSheet","flatten","track","interpolate","inputRange","outputRange","valueVisibleStyle","getMinimumTrackStyles","getTouchOverflowStyle","containerVertical","containerHorizontal","trackVertical","trackHorizontal","touchArea","panHandlers","renderDebugThumbTouchRect","Component","SliderThumb","isVisible","onLayout","color","vertical","ThumbComponent","View","axis","thumbPosition","styleTransform","transform","visibleStyle","thumb","propTypes","number","bool","string","shape","onValueChange","func","onSlidingStart","onSlidingComplete","oneOfType","object","array","oneOf","defaultProps","justifyContent","flexDirection","alignItems","borderRadius","flex","right","bottom","debugThumbTouchArea"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  StyleSheet,\n  Animated,\n  Easing,\n  PanResponder,\n  Platform,\n} from 'react-native';\n\nimport { withTheme } from '../config';\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\nconst TRACK_STYLE = Platform.select({ web: 0, default: -1 });\n\nconst DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\nconst getBoundedValue = (value, maximumValue, minimumValue) =>\n  Math.max(Math.min(value, maximumValue), minimumValue);\n\nclass Rect {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  containsPoint(x, y) {\n    return (\n      x >= this.x &&\n      y >= this.y &&\n      x <= this.x + this.width &&\n      y <= this.y + this.height\n    );\n  }\n}\n\nclass Slider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      containerSize: { width: 0, height: 0 },\n      trackSize: { width: 0, height: 0 },\n      thumbSize: { width: 0, height: 0 },\n      allMeasured: false,\n      value: new Animated.Value(\n        getBoundedValue(props.value, props.maximumValue, props.minimumValue)\n      ),\n    };\n\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(\n        this\n      ),\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(\n        this\n      ),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\n        this\n      ),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n    this.isVertical = props.orientation === 'vertical';\n  }\n\n  componentDidUpdate(prevProps) {\n    const newValue = getBoundedValue(\n      this.props.value,\n      this.props.maximumValue,\n      this.props.minimumValue\n    );\n\n    if (prevProps.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    const { animationType } = this.props;\n    const animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      }\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder(/* e: Object, gestureState: Object */) {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  handlePanResponderGrant(/* e: Object, gestureState: Object */) {\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest({ nativeEvent }) {\n    const thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(\n      nativeEvent.locationX,\n      nativeEvent.locationY\n    );\n  }\n\n  handleStartShouldSetPanResponder(e /* gestureState: Object */) {\n    // Should we become active when the user presses down on the thumb?\n    if (!this.props.allowTouchTrack) {\n      return this.thumbHitTest(e);\n    }\n    this.setCurrentValue(this.getOnTouchValue(e));\n    this.fireChangeEvent('onValueChange');\n    return true;\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  // get value of where some touched on slider.\n  getOnTouchValue({ nativeEvent }) {\n    const location = this.isVertical\n      ? nativeEvent.locationY\n      : nativeEvent.locationX;\n\n    return this.getValueForTouch(location);\n  }\n\n  getValueForTouch(location) {\n    const length = this.state.containerSize.width - this.state.thumbSize.width;\n    const ratio = location / length;\n    let newValue = ratio * (this.props.maximumValue - this.props.minimumValue);\n\n    if (this.props.step) {\n      newValue = Math.round(newValue / this.props.step) * this.props.step;\n    }\n    return getBoundedValue(\n      newValue + this.props.minimumValue,\n      this.props.maximumValue,\n      this.props.minimumValue\n    );\n  }\n\n  getTouchOverflowSize() {\n    const { thumbSize, allMeasured, containerSize } = this.state;\n    const { thumbTouchSize } = this.props;\n\n    const size = {};\n    if (allMeasured === true) {\n      size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n      size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n    }\n\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    const { width, height } = this.getTouchOverflowSize();\n\n    const touchOverflowStyle = {};\n    if (width !== undefined && height !== undefined) {\n      const verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      const horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  handleMeasure(name, x) {\n    const { width: layoutWidth, height: layoutHeight } = x.nativeEvent.layout;\n    const width = this.isVertical ? layoutHeight : layoutWidth;\n    const height = this.isVertical ? layoutWidth : layoutHeight;\n    const size = { width, height };\n    const storeName = `_${name}`;\n    const currentSize = this[storeName];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true,\n      });\n    }\n  }\n\n  measureContainer = (x) => {\n    this.handleMeasure('containerSize', x);\n  };\n\n  measureTrack = (x) => {\n    this.handleMeasure('trackSize', x);\n  };\n\n  measureThumb = (x) => {\n    this.handleMeasure('thumbSize', x);\n  };\n\n  getValue(gestureState) {\n    const location =\n      this._previousLeft +\n      (this.isVertical ? gestureState.dy : gestureState.dx);\n\n    return this.getValueForTouch(location);\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (\n      (value - this.props.minimumValue) /\n      (this.props.maximumValue - this.props.minimumValue)\n    );\n  }\n\n  getThumbLeft(value) {\n    const ratio = this.getRatio(value);\n    return (\n      ratio * (this.state.containerSize.width - this.state.thumbSize.width)\n    );\n  }\n\n  getThumbTouchRect() {\n    const { thumbSize, containerSize } = this.state;\n    const { thumbTouchSize } = this.props;\n    const touchOverflowSize = this.getTouchOverflowSize();\n    const height =\n      touchOverflowSize.height / 2 +\n      (containerSize.height - thumbTouchSize.height) / 2;\n    const width =\n      touchOverflowSize.width / 2 +\n      this.getThumbLeft(this.getCurrentValue()) +\n      (thumbSize.width - thumbTouchSize.width) / 2;\n\n    if (this.isVertical) {\n      return new Rect(\n        height,\n        width,\n        thumbTouchSize.width,\n        thumbTouchSize.height\n      );\n    }\n    return new Rect(width, height, thumbTouchSize.width, thumbTouchSize.height);\n  }\n\n  renderDebugThumbTouchRect(thumbLeft) {\n    const thumbTouchRect = this.getThumbTouchRect();\n    const positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n    return <Animated.View style={positionStyle} pointerEvents=\"none\" />;\n  }\n\n  getMinimumTrackStyles(thumbStart) {\n    const { thumbSize, trackSize } = this.state;\n    const minimumTrackStyle = {\n      position: 'absolute',\n    };\n    if (this.isVertical) {\n      minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n      minimumTrackStyle.marginLeft = trackSize.width * TRACK_STYLE;\n    } else {\n      minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n      minimumTrackStyle.marginTop = trackSize.height * TRACK_STYLE;\n    }\n    return minimumTrackStyle;\n  }\n\n  getThumbPositionStyles(thumbStart) {\n    return [{ [this.isVertical ? 'translateY' : 'translateX']: thumbStart }];\n  }\n\n  render() {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      thumbProps,\n      debugTouchArea,\n      orientation,\n      ...other\n    } = this.props;\n\n    const { value, containerSize, thumbSize, allMeasured } = this.state;\n\n    const mainStyles = containerStyle || styles;\n    const appliedTrackStyle = StyleSheet.flatten([styles.track, trackStyle]);\n    const thumbStart = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, containerSize.width - thumbSize.width],\n      // extrapolate: 'clamp',\n    });\n\n    const valueVisibleStyle = {};\n    if (!allMeasured) {\n      valueVisibleStyle.height = 0;\n      valueVisibleStyle.width = 0;\n    }\n\n    const minimumTrackStyle = {\n      ...this.getMinimumTrackStyles(thumbStart),\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    const touchOverflowStyle = this.getTouchOverflowStyle();\n    return (\n      <View\n        {...other}\n        style={StyleSheet.flatten([\n          this.isVertical\n            ? mainStyles.containerVertical\n            : mainStyles.containerHorizontal,\n          style,\n        ])}\n        onLayout={this.measureContainer}\n      >\n        <View\n          style={StyleSheet.flatten([\n            mainStyles.track,\n            this.isVertical\n              ? mainStyles.trackVertical\n              : mainStyles.trackHorizontal,\n            appliedTrackStyle,\n            { backgroundColor: maximumTrackTintColor },\n          ])}\n          onLayout={this.measureTrack}\n        />\n        <Animated.View\n          style={StyleSheet.flatten([\n            mainStyles.track,\n            this.isVertical\n              ? mainStyles.trackVertical\n              : mainStyles.trackHorizontal,\n            appliedTrackStyle,\n            minimumTrackStyle,\n          ])}\n        />\n        <SliderThumb\n          isVisible={allMeasured}\n          onLayout={this.measureThumb.bind(this)}\n          style={thumbStyle}\n          color={thumbTintColor}\n          start={thumbStart}\n          vertical={this.isVertical}\n          {...thumbProps}\n        />\n        <View\n          style={StyleSheet.flatten([styles.touchArea, touchOverflowStyle])}\n          {...this.panResponder.panHandlers}\n        >\n          {debugTouchArea === true &&\n            this.renderDebugThumbTouchRect(thumbStart)}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst SliderThumb = ({\n  Component,\n  isVisible,\n  onLayout,\n  style,\n  start,\n  color,\n  vertical,\n  ...props\n}) => {\n  const ThumbComponent = Component || Animated.View;\n  const axis = vertical ? 'translateY' : 'translateX';\n  const thumbPosition = [{ [axis]: start }];\n  const styleTransform = (style && style.transform) || [];\n  const visibleStyle = isVisible ? {} : { height: 0, width: 0 };\n\n  return (\n    <ThumbComponent\n      testID=\"sliderThumb\"\n      onLayout={onLayout}\n      style={StyleSheet.flatten([\n        {\n          backgroundColor: color,\n          transform: [...thumbPosition, ...styleTransform],\n          ...visibleStyle,\n        },\n        styles.thumb,\n        style,\n      ])}\n      {...props}\n    />\n  );\n};\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * If true, thumb will jump if user presses anywhere on the slide.\n   */\n  allowTouchTrack: PropTypes.bool,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n  /*\n   * The props applied to the thumb.\n   */\n  thumbProps: PropTypes.object,\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n   * Set to true to animate values with default 'timing' animation type\n   */\n  animateTransitions: PropTypes.bool,\n\n  /**\n   * Custom Animation type. 'spring' or 'timing'.\n   */\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n\n  /**\n   * Choose the orientation. 'horizontal' or 'vertical'.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n   */\n  animationConfig: PropTypes.object,\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  allowTouchTrack: false,\n  thumbTintColor: 'red',\n  thumbTouchSize: { width: 40, height: 40 },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal',\n};\n\nconst styles = StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2,\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE,\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n\nexport { Slider };\nexport default withTheme(Slider, 'Slider');\n"]},"metadata":{},"sourceType":"module"}