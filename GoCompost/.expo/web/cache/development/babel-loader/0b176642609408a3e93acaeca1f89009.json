{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/pengsun/compost/GoCompost/components/Map/Map.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SegmentedControlTab from \"react-native-segmented-control-tab\";\nimport GOOGLE_API_KEY_FIREBASE from \"../../api_key\";\nimport PlaceList from \"../Place/PlaceList\";\nimport styles from \"./styles\";\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nvar firebaseConfig = {\n  apiKey: GOOGLE_API_KEY_FIREBASE,\n  authDomain: \"compostable-290100.firebaseapp.com\",\n  databaseURL: \"https://compostable-290100.firebaseio.com\",\n  projectId: \"compostable-290100\",\n  storageBucket: \"compostable-290100.appspot.com\",\n  messagingSenderId: \"1030026048519\",\n  appId: \"1:1030026048519:android:95d798444b97843e2f66a2\"\n};\n\nvar MapScreen = function (_Component) {\n  _inherits(MapScreen, _Component);\n\n  var _super = _createSuper(MapScreen);\n\n  function MapScreen(props) {\n    var _this;\n\n    _classCallCheck(this, MapScreen);\n\n    _this = _super.call(this, props);\n\n    _this.handleIndexChange = function (index) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        selectedIndex: index\n      }));\n\n      console.log(\"selected tab:\" + index);\n      console.log(\"load data...\");\n    };\n\n    _this.state = {\n      places: [],\n      selectedIndex: 0\n    };\n    return _this;\n  }\n\n  _createClass(MapScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(this.props);\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this.getPlaces());\n\n            case 4:\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 6]], Promise);\n    }\n  }, {\n    key: \"getPlaces\",\n    value: function getPlaces() {\n      var markers, firestore;\n      return _regeneratorRuntime.async(function getPlaces$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              markers = [];\n              firebase.initializeApp(firebaseConfig);\n              firestore = firebase.firestore();\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(firestore.collection(\"compost_centers\").get().then(function (querySnapshot) {\n                console.log(\"Total compost centers: \", querySnapshot.size);\n                querySnapshot.forEach(function (documentSnapshot) {\n                  console.log(\"data: \", documentSnapshot.data());\n                  markers.push(documentSnapshot.data());\n                });\n              }));\n\n            case 5:\n              this.setState({\n                places: markers\n              });\n              console.log(\"updated markers data.\");\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var initialRegion = {\n        latitude: 35.913978,\n        longitude: -79.053979,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      };\n      var places = this.state.places;\n\n      if (places.length > 0) {\n        console.log(\"data is ready.\");\n        return React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 7\n          }\n        }, React.createElement(View, {\n          style: styles.mapView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 9\n          }\n        }, React.createElement(MapView, {\n          style: {\n            flex: 1\n          },\n          showsUserLocation: true,\n          enableZoomControl: true,\n          provider: PROVIDER_GOOGLE,\n          ref: function ref(_ref) {\n            return _this2.map = _ref;\n          },\n          initialRegion: initialRegion,\n          onRegionChangeComplete: function onRegionChangeComplete(region) {\n            return _this2.setState({\n              region: region\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }\n        }, places.map(function (marker, i) {\n          return React.createElement(MapView.Marker, {\n            key: i,\n            coordinate: {\n              latitude: marker.location.latitude,\n              longitude: marker.location.longitude\n            },\n            title: marker.name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }\n          });\n        }))), React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 9\n          }\n        }, React.createElement(SegmentedControlTab, {\n          values: [\"Compost Centers\", \"Events\"],\n          selectedIndex: this.state.selectedIndex,\n          onTabPress: this.handleIndexChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }\n        })), React.createElement(View, {\n          style: styles.placeList,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 9\n          }\n        }, React.createElement(PlaceList, {\n          places: places,\n          map: this.map,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 11\n          }\n        })));\n      } else {\n        console.log(\"data not arrived yet...\");\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 9\n          }\n        });\n      }\n    }\n  }]);\n\n  return MapScreen;\n}(Component);\n\nexport default MapScreen;","map":{"version":3,"sources":["/Users/pengsun/compost/GoCompost/components/Map/Map.js"],"names":["React","Component","MapView","PROVIDER_GOOGLE","SegmentedControlTab","GOOGLE_API_KEY_FIREBASE","PlaceList","styles","firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MapScreen","props","handleIndexChange","index","setState","state","selectedIndex","console","log","places","getPlaces","markers","initializeApp","firestore","collection","get","then","querySnapshot","size","forEach","documentSnapshot","data","push","initialRegion","latitude","longitude","latitudeDelta","longitudeDelta","length","container","mapView","flex","ref","map","region","marker","i","location","name","placeList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\nimport { View, StyleSheet, Dimensions} from \"react-native\";\nimport SegmentedControlTab from \"react-native-segmented-control-tab\"\nimport GOOGLE_API_KEY_FIREBASE from \"../../api_key\";\n\n//Components\nimport PlaceList from \"../Place/PlaceList\";\n\n//Styles\nimport styles from \"./styles\";\n\n//Firebase\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\n\n// Initialize Firebase\nconst firebaseConfig = {\n    apiKey: GOOGLE_API_KEY_FIREBASE,\n    authDomain: \"compostable-290100.firebaseapp.com\",\n    databaseURL: \"https://compostable-290100.firebaseio.com\",\n    projectId: \"compostable-290100\",\n    storageBucket: \"compostable-290100.appspot.com\",\n    messagingSenderId: \"1030026048519\",\n    appId: \"1:1030026048519:android:95d798444b97843e2f66a2\",\n};  \n\nclass MapScreen extends Component {\n  constructor(props) {\n    super(props);\n    //Initial State\n    this.state = {\n        places: [],\n        selectedIndex: 0\n    };\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    try {\n      await this.getPlaces();\n    } catch(err){\n      console.log(err);\n    }\n  }\n\n  async getPlaces() {\n    const markers = [];\n\n\n    // Get data from firestore\n    firebase.initializeApp(firebaseConfig);\n    const firestore = firebase.firestore();\n\n    // Loop through the data and generate markers array\n    await firestore.collection(\"compost_centers\").get().then(querySnapshot => {\n        console.log(\"Total compost centers: \", querySnapshot.size);\n        querySnapshot.forEach(documentSnapshot => {\n            console.log(\"data: \", documentSnapshot.data());\n            markers.push(documentSnapshot.data());\n        });\n    });\n\n    //Update our places array\n    this.setState({ places: markers });\n    console.log(\"updated markers data.\");\n    //console.log(\"places to display: \" +  JSON.stringify(markers,null,4));\n\n  }\n\n  // Handle tab clicks\n  handleIndexChange = index => {\n    this.setState({\n      ...this.state,\n      selectedIndex: index\n    });\n    console.log(\"selected tab:\" + index);\n    console.log(\"load data...\");\n\n  };\n\n   // render the map\n  render() {\n    // Use Chapel Hill location\n    const initialRegion = {\n      latitude: 35.913978,\n      longitude: -79.053979,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    };\n  \n    const { places } = this.state;\n    // Followed the solution from https://stackoverflow.com/questions/58564916/react-native-maps-show-marker-callout\n    if (places.length>0) {\n      console.log(\"data is ready.\");\n    return (\n      <View style={styles.container}>\n\n        <View style={styles.mapView}>\n          <MapView\n            style={{\n              flex: 1\n            }}\n            showsUserLocation = {true}\n            enableZoomControl={true}\n            provider={PROVIDER_GOOGLE}\n            ref={ref => this.map = ref}\n            initialRegion = {initialRegion}\n            onRegionChangeComplete={region => this.setState({ region })}\n          >\n          {places.map((marker, i) => (\n              <MapView.Marker\n                key={i}\n                coordinate={{\n                  latitude: marker.location.latitude,\n                  longitude: marker.location.longitude\n                }}\n                title={marker.name}\n              />\n            ))}\n          </MapView>\n\n        </View>\n        <View>\n            <SegmentedControlTab\n              values={[\"Compost Centers\", \"Events\"]}\n              selectedIndex={this.state.selectedIndex}\n              onTabPress={this.handleIndexChange}\n              />\n        </View>\n        <View style={styles.placeList}>\n          <PlaceList places={places} map={this.map} />\n        </View>\n      </View>\n    ) }\n    else {\n      console.log(\"data not arrived yet...\");\n      return (\n        <View>\n        </View>\n      );\n    }\n  }\n}\n\nexport default MapScreen;\n"]},"metadata":{},"sourceType":"module"}