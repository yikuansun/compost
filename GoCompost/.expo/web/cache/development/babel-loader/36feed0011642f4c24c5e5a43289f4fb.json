{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/pengsun/compost/GoCompost/node_modules/react-native-segmented-control-tab/src/TabOption.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nvar styles = StyleSheet.create({\n  tabStyle: {\n    paddingVertical: 5,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#0076FF',\n    borderWidth: 1,\n    backgroundColor: 'white'\n  },\n  activeTabStyle: {\n    backgroundColor: '#0076FF'\n  },\n  tabTextStyle: {\n    color: '#0076FF'\n  },\n  activeTabTextStyle: {\n    color: 'white'\n  },\n  tabBadgeContainerStyle: {\n    borderRadius: 20,\n    backgroundColor: 'red',\n    paddingLeft: 5,\n    paddingRight: 5,\n    marginLeft: 5,\n    marginBottom: 3\n  },\n  activeTabBadgeContainerStyle: {\n    backgroundColor: 'white'\n  },\n  tabBadgeStyle: {\n    color: 'white',\n    fontSize: 11,\n    fontWeight: 'bold'\n  },\n  activeTabBadgeStyle: {\n    color: 'black'\n  }\n});\n\nvar TabOption = function (_PureComponent) {\n  _inherits(TabOption, _PureComponent);\n\n  var _super = _createSuper(TabOption);\n\n  function TabOption() {\n    _classCallCheck(this, TabOption);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TabOption, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isTabActive = _this$props.isTabActive,\n          index = _this$props.index,\n          badge = _this$props.badge,\n          text = _this$props.text,\n          firstTabStyle = _this$props.firstTabStyle,\n          lastTabStyle = _this$props.lastTabStyle,\n          tabStyle = _this$props.tabStyle,\n          activeTabStyle = _this$props.activeTabStyle,\n          tabTextStyle = _this$props.tabTextStyle,\n          activeTabTextStyle = _this$props.activeTabTextStyle,\n          tabBadgeContainerStyle = _this$props.tabBadgeContainerStyle,\n          activeTabBadgeContainerStyle = _this$props.activeTabBadgeContainerStyle,\n          tabBadgeStyle = _this$props.tabBadgeStyle,\n          activeTabBadgeStyle = _this$props.activeTabBadgeStyle,\n          onTabPress = _this$props.onTabPress,\n          textNumberOfLines = _this$props.textNumberOfLines,\n          allowFontScaling = _this$props.allowFontScaling,\n          accessible = _this$props.accessible,\n          activeTabOpacity = _this$props.activeTabOpacity,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          enabled = _this$props.enabled;\n      return React.createElement(TouchableOpacity, {\n        style: [styles.tabStyle, tabStyle, isTabActive ? [styles.activeTabStyle, activeTabStyle] : {}, firstTabStyle, lastTabStyle],\n        accessible: accessible,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: isTabActive ? 'selected' : 'button',\n        accessibilityComponentType: \"button\",\n        onPress: function onPress() {\n          return onTabPress(index);\n        },\n        disabled: !enabled,\n        activeOpacity: activeTabOpacity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: [styles.tabTextStyle, tabTextStyle, isTabActive ? [styles.activeTabTextStyle, activeTabTextStyle] : {}],\n        numberOfLines: textNumberOfLines,\n        allowFontScaling: allowFontScaling,\n        ellipsizeMode: \"tail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }, text), Boolean(badge) && React.createElement(View, {\n        style: [styles.tabBadgeContainerStyle, tabBadgeContainerStyle, isTabActive ? [styles.activeTabBadgeContainerStyle, activeTabBadgeContainerStyle] : {}],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: [styles.tabBadgeStyle, tabBadgeStyle, isTabActive ? [styles.activeTabBadgeStyle, activeTabBadgeStyle] : {}],\n        allowFontScaling: allowFontScaling,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }\n      }, badge))));\n    }\n  }]);\n\n  return TabOption;\n}(PureComponent);\n\nTabOption.defaultProps = {\n  isTabActive: false,\n  index: 0,\n  badge: '',\n  firstTabStyle: {},\n  lastTabStyle: {},\n  tabStyle: {},\n  activeTabStyle: {},\n  tabTextStyle: {},\n  activeTabTextStyle: {},\n  tabBadgeContainerStyle: {},\n  activeTabBadgeContainerStyle: {},\n  tabBadgeStyle: {},\n  activeTabBadgeStyle: {},\n  textNumberOfLines: 1,\n  allowFontScaling: false,\n  accessible: true,\n  activeTabOpacity: 1,\n  accessibilityLabel: '',\n  enabled: false,\n  onTabPress: function onTabPress() {}\n};\nexport { TabOption as default };","map":{"version":3,"sources":["/Users/pengsun/compost/GoCompost/node_modules/react-native-segmented-control-tab/src/TabOption.js"],"names":["React","PureComponent","styles","StyleSheet","create","tabStyle","paddingVertical","flex","justifyContent","alignItems","borderColor","borderWidth","backgroundColor","activeTabStyle","tabTextStyle","color","activeTabTextStyle","tabBadgeContainerStyle","borderRadius","paddingLeft","paddingRight","marginLeft","marginBottom","activeTabBadgeContainerStyle","tabBadgeStyle","fontSize","fontWeight","activeTabBadgeStyle","TabOption","props","isTabActive","index","badge","text","firstTabStyle","lastTabStyle","onTabPress","textNumberOfLines","allowFontScaling","accessible","activeTabOpacity","accessibilityLabel","enabled","flexDirection","Boolean","defaultProps"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react'\nimport {\n  View,\n  TouchableOpacity,\n  StyleSheet,\n  Text,\n} from 'react-native'\n\n\nimport type {\n  ViewStyleProp,\n  TextStyleProp,\n} from 'react-native/Libraries/StyleSheet/StyleSheet'\n\ntype Props = {\n  isTabActive?: boolean,\n  index?: number,\n  badge?: any,\n  text: string,\n  firstTabStyle?: ViewStyleProp,\n  lastTabStyle?: ViewStyleProp,\n  tabStyle?: ViewStyleProp,\n  activeTabStyle?: ViewStyleProp,\n  tabTextStyle?: TextStyleProp,\n  activeTabTextStyle?: TextStyleProp,\n  tabBadgeContainerStyle?: TextStyleProp,\n  activeTabBadgeContainerStyle?: TextStyleProp,\n  tabBadgeStyle?: TextStyleProp,\n  activeTabBadgeStyle?: TextStyleProp,\n  onTabPress: Function,\n  textNumberOfLines?: number,\n  allowFontScaling?: boolean,\n  accessible?: boolean,\n  activeTabOpacity?: number,\n  accessibilityLabel?: string,\n  enabled?: boolean,\n}\n\nconst styles = StyleSheet.create({\n  tabStyle: {\n    paddingVertical: 5,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#0076FF',\n    borderWidth: 1,\n    backgroundColor: 'white',\n  },\n  activeTabStyle: {\n    backgroundColor: '#0076FF',\n  },\n  tabTextStyle: {\n    color: '#0076FF',\n  },\n  activeTabTextStyle: {\n    color: 'white',\n  },\n  tabBadgeContainerStyle: {\n    borderRadius: 20,\n    backgroundColor: 'red',\n    paddingLeft: 5,\n    paddingRight: 5,\n    marginLeft: 5,\n    marginBottom: 3,\n  },\n  activeTabBadgeContainerStyle: {\n    backgroundColor: 'white',\n  },\n  tabBadgeStyle: {\n    color: 'white',\n    fontSize: 11,\n    fontWeight: 'bold',\n  },\n  activeTabBadgeStyle: {\n    color: 'black',\n  },\n})\n\nexport default class TabOption extends PureComponent<Props> {\n  static defaultProps = {\n    isTabActive: false,\n    index: 0,\n    badge: '',\n    firstTabStyle: {},\n    lastTabStyle: {},\n    tabStyle: {},\n    activeTabStyle: {},\n    tabTextStyle: {},\n    activeTabTextStyle: {},\n    tabBadgeContainerStyle: {},\n    activeTabBadgeContainerStyle: {},\n    tabBadgeStyle: {},\n    activeTabBadgeStyle: {},\n    textNumberOfLines: 1,\n    allowFontScaling: false,\n    accessible: true,\n    activeTabOpacity: 1,\n    accessibilityLabel: '',\n    enabled: false,\n    onTabPress: () => {},\n  };\n\n  render() {\n    const {\n      isTabActive,\n      index,\n      badge,\n      text,\n      firstTabStyle,\n      lastTabStyle,\n      tabStyle,\n      activeTabStyle,\n      tabTextStyle,\n      activeTabTextStyle,\n      tabBadgeContainerStyle,\n      activeTabBadgeContainerStyle,\n      tabBadgeStyle,\n      activeTabBadgeStyle,\n      onTabPress,\n      textNumberOfLines,\n      allowFontScaling,\n      accessible,\n      activeTabOpacity,\n      accessibilityLabel,\n      enabled,\n    } = this.props\n    return (\n      <TouchableOpacity\n        style={[\n          styles.tabStyle,\n          tabStyle,\n          isTabActive ? [styles.activeTabStyle, activeTabStyle] : {},\n          firstTabStyle,\n          lastTabStyle,\n        ]}\n        accessible={accessible}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={isTabActive ? 'selected' : 'button'}\n        accessibilityComponentType=\"button\"\n        onPress={() => onTabPress(index)}\n        disabled={!enabled}\n        activeOpacity={activeTabOpacity}\n      >\n        <View style={{ flexDirection: 'row' }}>\n          <Text\n            style={[\n              styles.tabTextStyle,\n              tabTextStyle,\n              isTabActive\n                ? [styles.activeTabTextStyle, activeTabTextStyle]\n                : {},\n            ]}\n            numberOfLines={textNumberOfLines}\n            allowFontScaling={allowFontScaling}\n            ellipsizeMode=\"tail\"\n          >\n            {text}\n          </Text>\n          {Boolean(badge) && (\n            <View\n              style={[\n                styles.tabBadgeContainerStyle,\n                tabBadgeContainerStyle,\n                isTabActive\n                  ? [\n                    styles.activeTabBadgeContainerStyle,\n                    activeTabBadgeContainerStyle,\n                  ]\n                  : {},\n              ]}\n            >\n              <Text\n                style={[\n                  styles.tabBadgeStyle,\n                  tabBadgeStyle,\n                  isTabActive\n                    ? [styles.activeTabBadgeStyle, activeTabBadgeStyle]\n                    : {},\n                ]}\n                allowFontScaling={allowFontScaling}\n              >\n                {badge}\n              </Text>\n            </View>\n          )}\n        </View>\n      </TouchableOpacity>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}