{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar from \"./TabBar\";\nimport SceneView from \"./SceneView\";\nimport Pager from \"./Pager\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nvar TabView = function (_React$Component) {\n  _inherits(TabView, _React$Component);\n\n  var _super = _createSuper(TabView);\n\n  function TabView() {\n    var _this;\n\n    _classCallCheck(this, TabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      layout: _objectSpread({\n        width: 0,\n        height: 0\n      }, _this.props.initialLayout)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"jumpToIndex\", function (index) {\n      if (index !== _this.props.navigationState.index) {\n        _this.props.onIndexChange(index);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (_this.state.layout.width === width && _this.state.layout.height === height) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          positionListener = _this$props.position,\n          onSwipeStart = _this$props.onSwipeStart,\n          onSwipeEnd = _this$props.onSwipeEnd,\n          navigationState = _this$props.navigationState,\n          lazy = _this$props.lazy,\n          lazyPreloadDistance = _this$props.lazyPreloadDistance,\n          removeClippedSubviews = _this$props.removeClippedSubviews,\n          keyboardDismissMode = _this$props.keyboardDismissMode,\n          swipeEnabled = _this$props.swipeEnabled,\n          swipeVelocityImpact = _this$props.swipeVelocityImpact,\n          timingConfig = _this$props.timingConfig,\n          springConfig = _this$props.springConfig,\n          tabBarPosition = _this$props.tabBarPosition,\n          renderTabBar = _this$props.renderTabBar,\n          renderScene = _this$props.renderScene,\n          renderLazyPlaceholder = _this$props.renderLazyPlaceholder,\n          sceneContainerStyle = _this$props.sceneContainerStyle,\n          style = _this$props.style,\n          gestureHandlerProps = _this$props.gestureHandlerProps,\n          springVelocityScale = _this$props.springVelocityScale,\n          renderPager = _this$props.renderPager;\n      var layout = this.state.layout;\n      return React.createElement(GestureHandlerWrapper, {\n        onLayout: this.handleLayout,\n        style: [styles.pager, style]\n      }, renderPager({\n        navigationState: navigationState,\n        layout: layout,\n        keyboardDismissMode: keyboardDismissMode,\n        swipeEnabled: swipeEnabled,\n        swipeVelocityImpact: swipeVelocityImpact,\n        timingConfig: timingConfig,\n        springConfig: springConfig,\n        onSwipeStart: onSwipeStart,\n        onSwipeEnd: onSwipeEnd,\n        onIndexChange: this.jumpToIndex,\n        springVelocityScale: springVelocityScale,\n        removeClippedSubviews: removeClippedSubviews,\n        gestureHandlerProps: gestureHandlerProps,\n        children: function children(_ref) {\n          var position = _ref.position,\n              render = _ref.render,\n              addListener = _ref.addListener,\n              removeListener = _ref.removeListener,\n              jumpTo = _ref.jumpTo;\n          var sceneRendererProps = {\n            position: position,\n            layout: layout,\n            jumpTo: jumpTo\n          };\n          return React.createElement(React.Fragment, null, positionListener ? React.createElement(Animated.Code, {\n            exec: Animated.set(positionListener, position)\n          }) : null, tabBarPosition === 'top' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n            navigationState: navigationState\n          })), render(navigationState.routes.map(function (route, i) {\n            return React.createElement(SceneView, _extends({}, sceneRendererProps, {\n              addListener: addListener,\n              removeListener: removeListener,\n              key: route.key,\n              index: i,\n              lazy: lazy,\n              lazyPreloadDistance: lazyPreloadDistance,\n              navigationState: navigationState,\n              style: sceneContainerStyle\n            }), function (_ref2) {\n              var loading = _ref2.loading;\n              return loading ? renderLazyPlaceholder({\n                route: route\n              }) : renderScene(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n                route: route\n              }));\n            });\n          })), tabBarPosition === 'bottom' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n            navigationState: navigationState\n          })));\n        }\n      }));\n    }\n  }]);\n\n  return TabView;\n}(React.Component);\n\nexport { TabView as default };\n\n_defineProperty(TabView, \"defaultProps\", {\n  tabBarPosition: 'top',\n  renderTabBar: function renderTabBar(props) {\n    return React.createElement(TabBar, props);\n  },\n  renderLazyPlaceholder: function renderLazyPlaceholder() {\n    return null;\n  },\n  keyboardDismissMode: 'auto',\n  swipeEnabled: true,\n  lazy: false,\n  lazyPreloadDistance: 0,\n  removeClippedSubviews: false,\n  springConfig: {},\n  timingConfig: {},\n  gestureHandlerProps: {},\n  renderPager: function renderPager(props) {\n    return React.createElement(Pager, props);\n  }\n});\n\nvar styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["TabView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","TabView","React","tabBarPosition","renderTabBar","props","renderLazyPlaceholder","keyboardDismissMode","swipeEnabled","lazy","lazyPreloadDistance","removeClippedSubviews","springConfig","timingConfig","gestureHandlerProps","renderPager","layout","width","height","index","e","position","styles","navigationState","swipeVelocityImpact","onSwipeStart","onSwipeEnd","onIndexChange","springVelocityScale","children","jumpTo","sceneRendererProps","positionListener","Animated","render","route","sceneContainerStyle","loading","renderScene","pager","flex","overflow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAQA,SAAA,sBAAA,QAAA,8BAAA;AAIA,OAAA,QAAA,MAAA,yBAAA;AACA,OAAA,MAAA;AACA,OAAA,SAAA;AAQA,OAAA,KAAA;AAgCA,IAAMA,qBAAqB,GAAGC,sBAAH,KAAA,IAAGA,IAAAA,sBAAH,KAAA,KAAA,CAAGA,GAAH,sBAAGA,GAA9B,IAAA;;IAEe,O;;;;;AAGb,qBAAA;AAAA;;AAAA;;AAAA,sCAAA,IAAA;AAAA,MAAA,IAAA;AAAA;;AAAA,oDAAA,IAAA;;AAAA,IAAA,eAAA,gCAAA,OAAA,EAkBQ;AACNgB,MAAAA,MAAM,EAAA,aAAA,CAAA;AAAIC,QAAAA,KAAK,EAAT,CAAA;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OAAA,EAA4B,MAAA,KAAA,CAA5B,aAAA;AADA,KAlBR,CAAA;;AAAA,IAAA,eAAA,gCAAA,aAAA,EAsBuBC,UAAAA,KAAD,EAAmB;AACvC,UAAIA,KAAK,KAAK,MAAA,KAAA,CAAA,eAAA,CAAd,KAAA,EAAgD;AAC9C,cAAA,KAAA,CAAA,aAAA,CAAA,KAAA;AACD;AAzBH,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,cAAA,EA4BwBC,UAAAA,CAAD,EAA0B;AAAA,kCACrBA,CAAC,CAADA,WAAAA,CAA1B,MAD+C;AAAA,UACzC,MADyC,yBACzC,MADyC;AAAA,UAC/BH,KAD+B,yBAC/BA,KAD+B;;AAG/C,UACE,MAAA,KAAA,CAAA,MAAA,CAAA,KAAA,KAAA,KAAA,IACA,MAAA,KAAA,CAAA,MAAA,CAAA,MAAA,KAFF,MAAA,EAGE;AACA;AACD;;AAED,YAAA,QAAA,CAAc;AACZD,QAAAA,MAAM,EAAE;AACNE,UAAAA,MADM,EACNA,MADM;AAEND,UAAAA,KAAAA,EAAAA;AAFM;AADI,OAAd;AAtCF,KAAA,CAAA;;AAAA;AAAA;;;;6BA8CS;AAAA,wBAuBH,KAtBJ,KADO;AAAA,UACD,gBADC,eAELI,QAFK;AAAA,UACD,YADC,eACD,YADC;AAAA,UACD,UADC,eACD,UADC;AAAA,UACD,eADC,eACD,eADC;AAAA,UACD,IADC,eACD,IADC;AAAA,UACD,mBADC,eACD,mBADC;AAAA,UACD,qBADC,eACD,qBADC;AAAA,UACD,mBADC,eACD,mBADC;AAAA,UACD,YADC,eACD,YADC;AAAA,UACD,mBADC,eACD,mBADC;AAAA,UACD,YADC,eACD,YADC;AAAA,UACD,YADC,eACD,YADC;AAAA,UACD,cADC,eACD,cADC;AAAA,UACD,YADC,eACD,YADC;AAAA,UACD,WADC,eACD,WADC;AAAA,UACD,qBADC,eACD,qBADC;AAAA,UACD,mBADC,eACD,mBADC;AAAA,UACD,KADC,eACD,KADC;AAAA,UACD,mBADC,eACD,mBADC;AAAA,UACD,mBADC,eACD,mBADC;AAAA,UAsBLN,WAtBK,eAsBLA,WAtBK;AAAA,UAwBCC,MAxBD,GAwBY,KAAnB,KAxBO,CAwBCA,MAxBD;AA0BP,aACE,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;AACE,QAAA,QAAQ,EAAE,KADZ,YAAA;AAEE,QAAA,KAAK,EAAE,CAACM,MAAM,CAAP,KAAA,EAAA,KAAA;AAFT,OAAA,EAIGP,WAAW,CAAC;AACXQ,QAAAA,eADW,EACXA,eADW;AAEXP,QAAAA,MAFW,EAEXA,MAFW;AAGXT,QAAAA,mBAHW,EAGXA,mBAHW;AAIXC,QAAAA,YAJW,EAIXA,YAJW;AAKXgB,QAAAA,mBALW,EAKXA,mBALW;AAMXX,QAAAA,YANW,EAMXA,YANW;AAOXD,QAAAA,YAPW,EAOXA,YAPW;AAQXa,QAAAA,YARW,EAQXA,YARW;AASXC,QAAAA,UATW,EASXA,UATW;AAUXC,QAAAA,aAAa,EAAE,KAVJ,WAAA;AAWXC,QAAAA,mBAXW,EAWXA,mBAXW;AAYXjB,QAAAA,qBAZW,EAYXA,qBAZW;AAaXG,QAAAA,mBAbW,EAaXA,mBAbW;AAcXe,QAAAA,QAAQ,EAAE,wBAMJ;AAAA,cANK,QAML,QANK,QAML;AAAA,cANK,MAML,QANK,MAML;AAAA,cANK,WAML,QANK,WAML;AAAA,cANK,cAML,QANK,cAML;AAAA,cADJC,MACI,QADJA,MACI;AAGJ,cAAMC,kBAAkB,GAAG;AACzBV,YAAAA,QADyB,EACzBA,QADyB;AAEzBL,YAAAA,MAFyB,EAEzBA,MAFyB;AAGzBc,YAAAA,MAAAA,EAAAA;AAHyB,WAA3B;AAMA,iBACE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA,IAAA,EACGE,gBAAgB,GACf,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,YAAA,IAAI,EAAEC,QAAQ,CAARA,GAAAA,CAAAA,gBAAAA,EAAAA,QAAAA;AADR,WAAA,CADe,GADnB,IAAA,EAMG9B,cAAc,KAAdA,KAAAA,IACCC,YAAY,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,kBAAA,CAAA,EAAA,EAAA,EAAA;AAEVmB,YAAAA,eAAAA,EAAAA;AAFU,WAAA,CAAA,CAPhB,EAWGW,MAAM,CACL,eAAe,CAAf,MAAA,CAAA,GAAA,CAA2B,UAAA,KAAA,EAAA,CAAA,EAAc;AACvC,mBACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,kBAAA,EAAA;AAEE,cAAA,WAAW,EAFb,WAAA;AAGE,cAAA,cAAc,EAHhB,cAAA;AAIE,cAAA,GAAG,EAAEC,KAAK,CAJZ,GAAA;AAKE,cAAA,KAAK,EALP,CAAA;AAME,cAAA,IAAI,EANN,IAAA;AAOE,cAAA,mBAAmB,EAPrB,mBAAA;AAQE,cAAA,eAAe,EARjB,eAAA;AASE,cAAA,KAAK,EAAEC;AATT,aAAA,CAAA,EAWG;AAAA,kBAAGC,OAAH,SAAGA,OAAH;AAAA,qBACCA,OAAO,GACH/B,qBAAqB,CAAC;AAAE6B,gBAAAA,KAAAA,EAAAA;AAAF,eAAD,CADlB,GAEHG,WAAW,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,kBAAA,CAAA,EAAA,EAAA,EAAA;AAETH,gBAAAA,KAAAA,EAAAA;AAFS,eAAA,CAAA,CAHhB;AAAA,aAXH,CADF;AAbN,WAYI,CADK,CAXT,EAqCGhC,cAAc,KAAdA,QAAAA,IACCC,YAAY,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,kBAAA,CAAA,EAAA,EAAA,EAAA;AAEVmB,YAAAA,eAAAA,EAAAA;AAFU,WAAA,CAAA,CAtChB,CADF;AA6CD;AA1EU,OAAD,CAJd,CADF;AAmFD;;;;EA9JmDrB,KAAK,CAA5C,S;;SAAA,O;;gBAAMD,O,kBAIG;AACpBE,EAAAA,cAAc,EADM,KAAA;AAEpBC,EAAAA,YAAY,EAAoBC,sBAAAA,KAAlB;AAAA,WACZ,KAAA,CAAA,aAAA,CAAA,MAAA,EAHkB,KAGlB,CADY;AAAA,GAFM;AAKpBC,EAAAA,qBAAqB,EAAE;AAAA,WALH,IAKG;AAAA,GALH;AAMpBC,EAAAA,mBAAmB,EANC,MAAA;AAOpBC,EAAAA,YAAY,EAPQ,IAAA;AAQpBC,EAAAA,IAAI,EARgB,KAAA;AASpBC,EAAAA,mBAAmB,EATC,CAAA;AAUpBC,EAAAA,qBAAqB,EAVD,KAAA;AAWpBC,EAAAA,YAAY,EAXQ,EAAA;AAYpBC,EAAAA,YAAY,EAZQ,EAAA;AAapBC,EAAAA,mBAAmB,EAbC,EAAA;AAcpBC,EAAAA,WAAW,EAAGV,qBAAAA,KAAD;AAAA,WAA4B,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,KAAA,CAA5B;AAAA;AAdO,C;;AA6JxB,IAAMiB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BiB,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EADC,CAAA;AAELC,IAAAA,QAAQ,EAAE;AAFL;AADwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport SceneView from './SceneView';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerCommonProps,\n} from './types';\nimport Pager, { Props as ChildProps } from './Pager';\n\nexport type Props<T extends Route> = PagerCommonProps & {\n  position?: Animated.Value<number>;\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: boolean;\n  lazyPreloadDistance: number;\n  removeClippedSubviews?: boolean;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n  renderPager: (props: ChildProps<T>) => React.ReactNode;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'auto',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n    springConfig: {},\n    timingConfig: {},\n    gestureHandlerProps: {},\n    renderPager: (props: ChildProps<any>) => <Pager {...props} />,\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      position: positionListener,\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      removeClippedSubviews,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeVelocityImpact,\n      timingConfig,\n      springConfig,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n      gestureHandlerProps,\n      springVelocityScale,\n      renderPager,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <GestureHandlerWrapper\n        onLayout={this.handleLayout}\n        style={[styles.pager, style]}\n      >\n        {renderPager({\n          navigationState,\n          layout,\n          keyboardDismissMode,\n          swipeEnabled,\n          swipeVelocityImpact,\n          timingConfig,\n          springConfig,\n          onSwipeStart,\n          onSwipeEnd,\n          onIndexChange: this.jumpToIndex,\n          springVelocityScale,\n          removeClippedSubviews,\n          gestureHandlerProps,\n          children: ({\n            position,\n            render,\n            addListener,\n            removeListener,\n            jumpTo,\n          }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {positionListener ? (\n                  <Animated.Code\n                    exec={Animated.set(positionListener, position)}\n                  />\n                ) : null}\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addListener={addListener}\n                        removeListener={removeListener}\n                        key={route.key}\n                        index={i}\n                        lazy={lazy}\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          },\n        })}\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}