{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\n\nvar TabBarTop = function (_React$PureComponent) {\n  _inherits(TabBarTop, _React$PureComponent);\n\n  var _super = _createSuper(TabBarTop);\n\n  function TabBarTop() {\n    var _this;\n\n    _classCallCheck(this, TabBarTop);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderLabel\", function (_ref) {\n      var route = _ref.route,\n          focused = _ref.focused,\n          color = _ref.color;\n      var _this$props = _this.props,\n          showLabel = _this$props.showLabel,\n          upperCaseLabel = _this$props.upperCaseLabel,\n          labelStyle = _this$props.labelStyle,\n          allowFontScaling = _this$props.allowFontScaling;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var label = _this.props.getLabelText({\n        route: route\n      });\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n\n      if (typeof label === 'function') {\n        return label({\n          focused: focused,\n          tintColor: color\n        });\n      }\n\n      return label;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderIcon\", function (_ref2) {\n      var route = _ref2.route,\n          focused = _ref2.focused,\n          color = _ref2.color;\n      var _this$props2 = _this.props,\n          renderIcon = _this$props2.renderIcon,\n          showIcon = _this$props2.showIcon,\n          iconStyle = _this$props2.iconStyle;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      return React.createElement(View, {\n        style: [styles.icon, iconStyle]\n      }, renderIcon({\n        route: route,\n        focused: focused,\n        tintColor: color\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(TabBarTop, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          activeTintColor = _this$props3.activeTintColor,\n          inactiveTintColor = _this$props3.inactiveTintColor,\n          renderIcon = _this$props3.renderIcon,\n          getLabelText = _this$props3.getLabelText,\n          allowFontScaling = _this$props3.allowFontScaling,\n          showLabel = _this$props3.showLabel,\n          showIcon = _this$props3.showIcon,\n          upperCaseLabel = _this$props3.upperCaseLabel,\n          tabBarPosition = _this$props3.tabBarPosition,\n          screenProps = _this$props3.screenProps,\n          iconStyle = _this$props3.iconStyle,\n          rest = _objectWithoutProperties(_this$props3, [\"navigation\", \"activeTintColor\", \"inactiveTintColor\", \"renderIcon\", \"getLabelText\", \"allowFontScaling\", \"showLabel\", \"showIcon\", \"upperCaseLabel\", \"tabBarPosition\", \"screenProps\", \"iconStyle\"]);\n\n      return React.createElement(TabBar, _extends({}, rest, {\n        activeColor: activeTintColor,\n        inactiveColor: inactiveTintColor,\n        navigationState: navigation.state,\n        renderIcon: this._renderIcon,\n        renderLabel: this._renderLabel\n      }));\n    }\n  }]);\n\n  return TabBarTop;\n}(React.PureComponent);\n\nexport { TabBarTop as default };\n\n_defineProperty(TabBarTop, \"defaultProps\", {\n  activeTintColor: 'rgba(255, 255, 255, 1)',\n  inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n});\n\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["TabBarTop","React","activeTintColor","inactiveTintColor","showIcon","showLabel","upperCaseLabel","allowFontScaling","color","label","route","styles","focused","tintColor","iconStyle","renderIcon","rest","navigation","_renderLabel","icon","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\nimport { NavigationRoute } from 'react-navigation';\nimport { MaterialTabBarProps } from '../types';\n\ntype Scene = { route: NavigationRoute; focused: boolean; color: string };\n\nexport default class TabBarTop extends React.PureComponent<\n  MaterialTabBarProps\n> {\n  static defaultProps = {\n    activeTintColor: 'rgba(255, 255, 255, 1)',\n    inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true,\n  };\n\n  _renderLabel = ({ route, focused, color }: Scene) => {\n    const {\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling,\n    } = this.props;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color }, labelStyle]}\n          allowFontScaling={allowFontScaling}\n        >\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ focused, tintColor: color });\n    }\n\n    return label;\n  };\n\n  _renderIcon = ({ route, focused, color }: Scene) => {\n    const { renderIcon, showIcon, iconStyle } = this.props;\n\n    if (showIcon === false) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.icon, iconStyle]}>\n        {renderIcon({\n          route,\n          focused,\n          tintColor: color,\n        })}\n      </View>\n    );\n  };\n\n  render() {\n    const {\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      renderIcon,\n      getLabelText,\n      allowFontScaling,\n      showLabel,\n      showIcon,\n      upperCaseLabel,\n      tabBarPosition,\n      screenProps,\n      iconStyle,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n\n    return (\n      <TabBar\n        {...rest}\n        activeColor={activeTintColor}\n        inactiveColor={inactiveTintColor}\n        navigationState={navigation.state}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}