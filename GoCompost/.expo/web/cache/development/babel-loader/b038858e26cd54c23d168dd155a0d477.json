{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/pengsun/compost/GoCompost/node_modules/react-native-segmented-control-tab/src/SegmentedControlTab.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TabOption from \"./TabOption\";\nvar styles = StyleSheet.create({\n  tabsContainerStyle: {\n    backgroundColor: 'transparent',\n    flexDirection: 'row'\n  },\n  tabStyle: {\n    paddingVertical: 5,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#0076FF',\n    borderWidth: 1,\n    backgroundColor: 'white'\n  }\n});\n\nvar handleTabPress = function handleTabPress(index, multiple, selectedIndex, onTabPress) {\n  if (multiple) {\n    onTabPress(index);\n  } else if (selectedIndex !== index) {\n    onTabPress(index);\n  }\n};\n\nvar getAccessibilityLabelByIndex = function getAccessibilityLabelByIndex(accessibilityLabels, index) {\n  return accessibilityLabels && accessibilityLabels.length > 0 && accessibilityLabels[index] ? accessibilityLabels[index] : undefined;\n};\n\nvar SegmentedControlTab = function (_PureComponent) {\n  _inherits(SegmentedControlTab, _PureComponent);\n\n  var _super = _createSuper(SegmentedControlTab);\n\n  function SegmentedControlTab() {\n    _classCallCheck(this, SegmentedControlTab);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SegmentedControlTab, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          multiple = _this$props.multiple,\n          selectedIndex = _this$props.selectedIndex,\n          selectedIndices = _this$props.selectedIndices,\n          values = _this$props.values,\n          badges = _this$props.badges,\n          borderRadius = _this$props.borderRadius,\n          tabsContainerStyle = _this$props.tabsContainerStyle,\n          tabsContainerDisableStyle = _this$props.tabsContainerDisableStyle,\n          tabStyle = _this$props.tabStyle,\n          firstTabStyle = _this$props.firstTabStyle,\n          lastTabStyle = _this$props.lastTabStyle,\n          activeTabStyle = _this$props.activeTabStyle,\n          tabTextStyle = _this$props.tabTextStyle,\n          activeTabTextStyle = _this$props.activeTabTextStyle,\n          tabBadgeContainerStyle = _this$props.tabBadgeContainerStyle,\n          activeTabBadgeContainerStyle = _this$props.activeTabBadgeContainerStyle,\n          tabBadgeStyle = _this$props.tabBadgeStyle,\n          activeTabBadgeStyle = _this$props.activeTabBadgeStyle,\n          _onTabPress = _this$props.onTabPress,\n          textNumberOfLines = _this$props.textNumberOfLines,\n          allowFontScaling = _this$props.allowFontScaling,\n          accessible = _this$props.accessible,\n          accessibilityLabels = _this$props.accessibilityLabels,\n          activeTabOpacity = _this$props.activeTabOpacity,\n          enabled = _this$props.enabled;\n      var firstTabStyleDefault = [{\n        borderRightWidth: values && values.length === 2 ? 1 : 0,\n        borderTopLeftRadius: borderRadius,\n        borderBottomLeftRadius: borderRadius\n      }];\n      var lastTabStyleDefault = [{\n        borderLeftWidth: 0,\n        borderTopRightRadius: borderRadius,\n        borderBottomRightRadius: borderRadius\n      }];\n      var tabsContainerStyles = [styles.tabsContainerStyle, tabsContainerStyle];\n\n      if (!enabled) {\n        tabsContainerStyles.push(tabsContainerDisableStyle);\n      }\n\n      return React.createElement(View, {\n        style: tabsContainerStyles,\n        removeClippedSubviews: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 7\n        }\n      }, values && values.map(function (item, index) {\n        var accessibilityText = getAccessibilityLabelByIndex(accessibilityLabels, index);\n        return React.createElement(TabOption, {\n          key: item,\n          index: index,\n          badge: badges && badges[index] ? badges[index] : false,\n          isTabActive: multiple ? selectedIndices.includes(index) : selectedIndex === index,\n          text: item,\n          textNumberOfLines: textNumberOfLines,\n          onTabPress: function onTabPress(indexs) {\n            return handleTabPress(indexs, multiple, selectedIndex, _onTabPress);\n          },\n          firstTabStyle: index === 0 ? [{\n            borderRightWidth: 0\n          }, firstTabStyleDefault, firstTabStyle] : {},\n          lastTabStyle: index === values.length - 1 ? [{\n            borderLeftWidth: 0\n          }, lastTabStyleDefault, lastTabStyle] : {},\n          tabStyle: [tabStyle, index !== 0 && index !== values.length - 1 ? {\n            marginLeft: -1\n          } : {}],\n          activeTabStyle: activeTabStyle,\n          tabTextStyle: tabTextStyle,\n          activeTabTextStyle: activeTabTextStyle,\n          tabBadgeContainerStyle: tabBadgeContainerStyle,\n          activeTabBadgeContainerStyle: activeTabBadgeContainerStyle,\n          tabBadgeStyle: tabBadgeStyle,\n          activeTabBadgeStyle: activeTabBadgeStyle,\n          allowFontScaling: allowFontScaling,\n          activeTabOpacity: activeTabOpacity,\n          accessible: accessible,\n          accessibilityLabel: accessibilityText || item,\n          enabled: enabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }\n        });\n      }));\n    }\n  }]);\n\n  return SegmentedControlTab;\n}(PureComponent);\n\nSegmentedControlTab.defaultProps = {};\nSegmentedControlTab.defaultProps = {\n  values: ['One', 'Two', 'Three'],\n  accessible: true,\n  accessibilityLabels: [],\n  badges: ['', '', ''],\n  multiple: false,\n  selectedIndex: 0,\n  selectedIndices: [0],\n  onTabPress: function onTabPress() {},\n  tabsContainerStyle: {},\n  tabsContainerDisableStyle: {\n    opacity: 0.6\n  },\n  tabStyle: {},\n  firstTabStyle: {},\n  lastTabStyle: {},\n  activeTabStyle: {},\n  tabTextStyle: {},\n  activeTabTextStyle: {},\n  tabBadgeContainerStyle: {},\n  activeTabBadgeContainerStyle: {},\n  tabBadgeStyle: {},\n  activeTabBadgeStyle: {},\n  borderRadius: 5,\n  textNumberOfLines: 1,\n  allowFontScaling: true,\n  activeTabOpacity: 1,\n  enabled: true\n};\nexport { SegmentedControlTab as default };","map":{"version":3,"sources":["/Users/pengsun/compost/GoCompost/node_modules/react-native-segmented-control-tab/src/SegmentedControlTab.js"],"names":["React","PureComponent","TabOption","styles","StyleSheet","create","tabsContainerStyle","backgroundColor","flexDirection","tabStyle","paddingVertical","flex","justifyContent","alignItems","borderColor","borderWidth","handleTabPress","index","multiple","selectedIndex","onTabPress","getAccessibilityLabelByIndex","accessibilityLabels","length","undefined","SegmentedControlTab","props","selectedIndices","values","badges","borderRadius","tabsContainerDisableStyle","firstTabStyle","lastTabStyle","activeTabStyle","tabTextStyle","activeTabTextStyle","tabBadgeContainerStyle","activeTabBadgeContainerStyle","tabBadgeStyle","activeTabBadgeStyle","textNumberOfLines","allowFontScaling","accessible","activeTabOpacity","enabled","firstTabStyleDefault","borderRightWidth","borderTopLeftRadius","borderBottomLeftRadius","lastTabStyleDefault","borderLeftWidth","borderTopRightRadius","borderBottomRightRadius","tabsContainerStyles","push","map","item","accessibilityText","includes","indexs","marginLeft","defaultProps","opacity"],"mappings":"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","sourcesContent":["/* @flow */\nimport React, { PureComponent } from 'react'\nimport {\n  View, StyleSheet,\n} from 'react-native'\n\nimport type {\n  ViewStyleProp,\n  TextStyleProp,\n} from 'react-native/Libraries/StyleSheet/StyleSheet'\n\nimport TabOption from './TabOption'\n\ntype Props = {\n  tabStyle: ViewStyleProp,\n  firstTabStyle: ViewStyleProp,\n  lastTabStyle: ViewStyleProp,\n  activeTabStyle: ViewStyleProp,\n  tabTextStyle: TextStyleProp,\n  activeTabTextStyle: TextStyleProp,\n  tabBadgeContainerStyle: TextStyleProp,\n  activeTabBadgeContainerStyle: TextStyleProp,\n  tabBadgeStyle: TextStyleProp,\n  activeTabBadgeStyle: TextStyleProp,\n  onTabPress: Function,\n  textNumberOfLines: number,\n  allowFontScaling: boolean,\n  accessible: boolean,\n  activeTabOpacity: number,\n  enabled: boolean,\n  values: string[],\n  badges: string[],\n  multiple: boolean,\n  selectedIndex: number,\n  selectedIndices: number[],\n  tabsContainerStyle: ViewStyleProp,\n  tabsContainerDisableStyle: ViewStyleProp,\n  borderRadius: number,\n  accessibilityLabels: string[],\n}\n\nconst styles = StyleSheet.create({\n  tabsContainerStyle: {\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n  },\n  tabStyle: {\n    paddingVertical: 5,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#0076FF',\n    borderWidth: 1,\n    backgroundColor: 'white',\n  },\n})\nconst handleTabPress = (\n  index: number,\n  multiple: boolean,\n  selectedIndex: number,\n  onTabPress: Function,\n) => {\n  if (multiple) {\n    onTabPress(index)\n  } else if (selectedIndex !== index) {\n    onTabPress(index)\n  }\n}\n\nconst getAccessibilityLabelByIndex = (\n  accessibilityLabels: string[],\n  index: number,\n) => (accessibilityLabels\n  && accessibilityLabels.length > 0\n  && accessibilityLabels[index]\n  ? accessibilityLabels[index]\n  : undefined)\n\nexport default class SegmentedControlTab extends PureComponent<Props> {\n  static defaultProps = {\n\n  };\n\n  static defaultProps = {\n    values: ['One', 'Two', 'Three'],\n    accessible: true,\n    accessibilityLabels: [],\n    badges: ['', '', ''],\n    multiple: false,\n    selectedIndex: 0,\n    selectedIndices: [0],\n    onTabPress: () => {},\n    tabsContainerStyle: {},\n    tabsContainerDisableStyle: { opacity: 0.6 },\n    tabStyle: {},\n    firstTabStyle: {},\n    lastTabStyle: {},\n    activeTabStyle: {},\n    tabTextStyle: {},\n    activeTabTextStyle: {},\n    tabBadgeContainerStyle: {},\n    activeTabBadgeContainerStyle: {},\n    tabBadgeStyle: {},\n    activeTabBadgeStyle: {},\n    borderRadius: 5,\n    textNumberOfLines: 1,\n    allowFontScaling: true,\n    activeTabOpacity: 1,\n    enabled: true,\n  };\n\n\n  render() {\n    const {\n      multiple,\n      selectedIndex,\n      selectedIndices,\n      values,\n      badges,\n      borderRadius,\n      tabsContainerStyle,\n      tabsContainerDisableStyle,\n      tabStyle,\n      firstTabStyle,\n      lastTabStyle,\n      activeTabStyle,\n      tabTextStyle,\n      activeTabTextStyle,\n      tabBadgeContainerStyle,\n      activeTabBadgeContainerStyle,\n      tabBadgeStyle,\n      activeTabBadgeStyle,\n      onTabPress,\n      textNumberOfLines,\n      allowFontScaling,\n      accessible,\n      accessibilityLabels,\n      activeTabOpacity,\n      enabled,\n    } = this.props\n    const firstTabStyleDefault = [\n      {\n        borderRightWidth: values && values.length === 2 ? 1 : 0,\n        borderTopLeftRadius: borderRadius,\n        borderBottomLeftRadius: borderRadius,\n      },\n    ]\n    const lastTabStyleDefault = [\n      {\n        borderLeftWidth: 0,\n        borderTopRightRadius: borderRadius,\n        borderBottomRightRadius: borderRadius,\n      },\n    ]\n\n    const tabsContainerStyles = [styles.tabsContainerStyle, tabsContainerStyle]\n    if (!enabled) {\n      tabsContainerStyles.push(tabsContainerDisableStyle)\n    }\n    return (\n      <View style={tabsContainerStyles} removeClippedSubviews={false}>\n        {values && values.map((item, index) => {\n          const accessibilityText = getAccessibilityLabelByIndex(\n            accessibilityLabels,\n            index,\n          )\n          return (\n            <TabOption\n              key={item}\n              index={index}\n              badge={badges && badges[index] ? badges[index] : false}\n              isTabActive={\n                multiple\n                  ? selectedIndices.includes(index)\n                  : selectedIndex === index\n              }\n              text={item}\n              textNumberOfLines={textNumberOfLines}\n              onTabPress={indexs => handleTabPress(indexs, multiple, selectedIndex, onTabPress)\n              }\n              firstTabStyle={\n                index === 0 ? [{ borderRightWidth: 0 }, firstTabStyleDefault, firstTabStyle] : {}\n              }\n              lastTabStyle={\n                index === values.length - 1\n                  ? [{ borderLeftWidth: 0 }, lastTabStyleDefault, lastTabStyle]\n                  : {}\n              }\n              tabStyle={[\n                tabStyle,\n                index !== 0 && index !== values.length - 1\n                  ? { marginLeft: -1 }\n                  : {},\n              ]}\n              activeTabStyle={activeTabStyle}\n              tabTextStyle={tabTextStyle}\n              activeTabTextStyle={activeTabTextStyle}\n              tabBadgeContainerStyle={tabBadgeContainerStyle}\n              activeTabBadgeContainerStyle={activeTabBadgeContainerStyle}\n              tabBadgeStyle={tabBadgeStyle}\n              activeTabBadgeStyle={activeTabBadgeStyle}\n              allowFontScaling={allowFontScaling}\n              activeTabOpacity={activeTabOpacity}\n              accessible={accessible}\n              accessibilityLabel={accessibilityText || item}\n              enabled={enabled}\n            />\n          )\n        })}\n      </View>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}