{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar ErrorUtils = require(\"../vendor/core/ErrorUtils\");\n\nvar Systrace = require(\"../Performance/Systrace\");\n\nvar deepFreezeAndThrowOnMutationInDev = require(\"../Utilities/deepFreezeAndThrowOnMutationInDev\");\n\nvar invariant = require('invariant');\n\nvar stringifySafe = require(\"../Utilities/stringifySafe\");\n\nvar warnOnce = require(\"../Utilities/warnOnce\");\n\nvar TO_JS = 0;\nvar TO_NATIVE = 1;\nvar MODULE_IDS = 0;\nvar METHOD_IDS = 1;\nvar PARAMS = 2;\nvar MIN_TIME_BETWEEN_FLUSHES_MS = 5;\nvar TRACE_TAG_REACT_APPS = 1 << 17;\nvar DEBUG_INFO_LIMIT = 32;\n\nvar MessageQueue = function () {\n  function MessageQueue() {\n    _classCallCheck(this, MessageQueue);\n\n    this._lazyCallableModules = {};\n    this._queue = [[], [], [], 0];\n    this._successCallbacks = new Map();\n    this._failureCallbacks = new Map();\n    this._callID = 0;\n    this._lastFlush = 0;\n    this._eventLoopStartTime = Date.now();\n    this._immediatesCallback = null;\n\n    if (__DEV__) {\n      this._debugInfo = {};\n      this._remoteModuleTable = {};\n      this._remoteMethodTable = {};\n    }\n\n    this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);\n    this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);\n    this.flushedQueue = this.flushedQueue.bind(this);\n    this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);\n  }\n\n  _createClass(MessageQueue, [{\n    key: \"callFunctionReturnFlushedQueue\",\n    value: function callFunctionReturnFlushedQueue(module, method, args) {\n      var _this = this;\n\n      this.__guard(function () {\n        _this.__callFunction(module, method, args);\n      });\n\n      return this.flushedQueue();\n    }\n  }, {\n    key: \"callFunctionReturnResultAndFlushedQueue\",\n    value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {\n      var _this2 = this;\n\n      var result;\n\n      this.__guard(function () {\n        result = _this2.__callFunction(module, method, args);\n      });\n\n      return [result, this.flushedQueue()];\n    }\n  }, {\n    key: \"invokeCallbackAndReturnFlushedQueue\",\n    value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {\n      var _this3 = this;\n\n      this.__guard(function () {\n        _this3.__invokeCallback(cbID, args);\n      });\n\n      return this.flushedQueue();\n    }\n  }, {\n    key: \"flushedQueue\",\n    value: function flushedQueue() {\n      var _this4 = this;\n\n      this.__guard(function () {\n        _this4.__callImmediates();\n      });\n\n      var queue = this._queue;\n      this._queue = [[], [], [], this._callID];\n      return queue[0].length ? queue : null;\n    }\n  }, {\n    key: \"getEventLoopRunningTime\",\n    value: function getEventLoopRunningTime() {\n      return Date.now() - this._eventLoopStartTime;\n    }\n  }, {\n    key: \"registerCallableModule\",\n    value: function registerCallableModule(name, module) {\n      this._lazyCallableModules[name] = function () {\n        return module;\n      };\n    }\n  }, {\n    key: \"registerLazyCallableModule\",\n    value: function registerLazyCallableModule(name, factory) {\n      var module;\n      var getValue = factory;\n\n      this._lazyCallableModules[name] = function () {\n        if (getValue) {\n          module = getValue();\n          getValue = null;\n        }\n\n        return module;\n      };\n    }\n  }, {\n    key: \"getCallableModule\",\n    value: function getCallableModule(name) {\n      var getValue = this._lazyCallableModules[name];\n      return getValue ? getValue() : null;\n    }\n  }, {\n    key: \"callNativeSyncHook\",\n    value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {\n      if (__DEV__) {\n        invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\\n\\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');\n      }\n\n      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n\n      try {\n        return global.nativeCallSyncHook(moduleID, methodID, params);\n      } catch (e) {\n        if (typeof e === 'object' && e != null && typeof e.framesToPop === 'undefined' && /^Exception in HostFunction: /.test(e.message)) {\n          e.framesToPop = 2;\n        }\n\n        throw e;\n      }\n    }\n  }, {\n    key: \"processCallbacks\",\n    value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {\n      var _this5 = this;\n\n      if (onFail || onSucc) {\n        if (__DEV__) {\n          this._debugInfo[this._callID] = [moduleID, methodID];\n\n          if (this._callID > DEBUG_INFO_LIMIT) {\n            delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\n          }\n\n          if (this._successCallbacks.size > 500) {\n            var info = {};\n\n            this._successCallbacks.forEach(function (_, callID) {\n              var debug = _this5._debugInfo[callID];\n              var module = debug && _this5._remoteModuleTable[debug[0]];\n              var method = debug && _this5._remoteMethodTable[debug[0]][debug[1]];\n              info[callID] = {\n                module: module,\n                method: method\n              };\n            });\n\n            warnOnce('excessive-number-of-pending-callbacks', \"Please report: Excessive number of pending callbacks: \" + this._successCallbacks.size + \". Some pending callbacks that might have leaked by never being called from native code: \" + stringifySafe(info));\n          }\n        }\n\n        onFail && params.push(this._callID << 1);\n        onSucc && params.push(this._callID << 1 | 1);\n\n        this._successCallbacks.set(this._callID, onSucc);\n\n        this._failureCallbacks.set(this._callID, onFail);\n      }\n\n      if (__DEV__) {\n        global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);\n      }\n\n      this._callID++;\n    }\n  }, {\n    key: \"enqueueNativeCall\",\n    value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {\n      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n\n      this._queue[MODULE_IDS].push(moduleID);\n\n      this._queue[METHOD_IDS].push(methodID);\n\n      if (__DEV__) {\n        var isValidArgument = function isValidArgument(val) {\n          var t = typeof val;\n\n          if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'string') {\n            return true;\n          }\n\n          if (t === 'number') {\n            return isFinite(val);\n          }\n\n          if (t === 'function' || t !== 'object') {\n            return false;\n          }\n\n          if (Array.isArray(val)) {\n            return val.every(isValidArgument);\n          }\n\n          for (var k in val) {\n            if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n\n        var replacer = function replacer(key, val) {\n          var t = typeof val;\n\n          if (t === 'function') {\n            return '<<Function ' + val.name + '>>';\n          } else if (t === 'number' && !isFinite(val)) {\n            return '<<' + val.toString() + '>>';\n          } else {\n            return val;\n          }\n        };\n\n        invariant(isValidArgument(params), '%s is not usable as a native method argument', JSON.stringify(params, replacer));\n        deepFreezeAndThrowOnMutationInDev(params);\n      }\n\n      this._queue[PARAMS].push(params);\n\n      var now = Date.now();\n\n      if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {\n        var queue = this._queue;\n        this._queue = [[], [], [], this._callID];\n        this._lastFlush = now;\n        global.nativeFlushQueueImmediate(queue);\n      }\n\n      Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\n\n      if (__DEV__ && this.__spy && isFinite(moduleID)) {\n        this.__spy({\n          type: TO_NATIVE,\n          module: this._remoteModuleTable[moduleID],\n          method: this._remoteMethodTable[moduleID][methodID],\n          args: params\n        });\n      } else if (this.__spy) {\n        this.__spy({\n          type: TO_NATIVE,\n          module: moduleID + '',\n          method: methodID,\n          args: params\n        });\n      }\n    }\n  }, {\n    key: \"createDebugLookup\",\n    value: function createDebugLookup(moduleID, name, methods) {\n      if (__DEV__) {\n        this._remoteModuleTable[moduleID] = name;\n        this._remoteMethodTable[moduleID] = methods || [];\n      }\n    }\n  }, {\n    key: \"setImmediatesCallback\",\n    value: function setImmediatesCallback(fn) {\n      this._immediatesCallback = fn;\n    }\n  }, {\n    key: \"__guard\",\n    value: function __guard(fn) {\n      if (this.__shouldPauseOnThrow()) {\n        fn();\n      } else {\n        try {\n          fn();\n        } catch (error) {\n          ErrorUtils.reportFatalError(error);\n        }\n      }\n    }\n  }, {\n    key: \"__shouldPauseOnThrow\",\n    value: function __shouldPauseOnThrow() {\n      return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;\n    }\n  }, {\n    key: \"__callImmediates\",\n    value: function __callImmediates() {\n      Systrace.beginEvent('JSTimers.callImmediates()');\n\n      if (this._immediatesCallback != null) {\n        this._immediatesCallback();\n      }\n\n      Systrace.endEvent();\n    }\n  }, {\n    key: \"__callFunction\",\n    value: function __callFunction(module, method, args) {\n      this._lastFlush = Date.now();\n      this._eventLoopStartTime = this._lastFlush;\n\n      if (__DEV__ || this.__spy) {\n        Systrace.beginEvent(module + \".\" + method + \"(\" + stringifySafe(args) + \")\");\n      } else {\n        Systrace.beginEvent(module + \".\" + method + \"(...)\");\n      }\n\n      if (this.__spy) {\n        this.__spy({\n          type: TO_JS,\n          module: module,\n          method: method,\n          args: args\n        });\n      }\n\n      var moduleMethods = this.getCallableModule(module);\n      invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);\n      invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);\n      var result = moduleMethods[method].apply(moduleMethods, args);\n      Systrace.endEvent();\n      return result;\n    }\n  }, {\n    key: \"__invokeCallback\",\n    value: function __invokeCallback(cbID, args) {\n      this._lastFlush = Date.now();\n      this._eventLoopStartTime = this._lastFlush;\n      var callID = cbID >>> 1;\n      var isSuccess = cbID & 1;\n      var callback = isSuccess ? this._successCallbacks.get(callID) : this._failureCallbacks.get(callID);\n\n      if (__DEV__) {\n        var debug = this._debugInfo[callID];\n\n        var _module = debug && this._remoteModuleTable[debug[0]];\n\n        var method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n        invariant(callback, \"No callback found with cbID \" + cbID + \" and callID \" + callID + \" for \" + (method ? \" \" + _module + \".\" + method + \" - most likely the callback was already invoked\" : \"module \" + (_module || '<unknown>')) + (\". Args: '\" + stringifySafe(args) + \"'\"));\n        var profileName = debug ? '<callback for ' + _module + '.' + method + '>' : cbID;\n\n        if (callback && this.__spy) {\n          this.__spy({\n            type: TO_JS,\n            module: null,\n            method: profileName,\n            args: args\n          });\n        }\n\n        Systrace.beginEvent(\"MessageQueue.invokeCallback(\" + profileName + \", \" + stringifySafe(args) + \")\");\n      }\n\n      if (!callback) {\n        return;\n      }\n\n      this._successCallbacks.delete(callID);\n\n      this._failureCallbacks.delete(callID);\n\n      callback.apply(void 0, _toConsumableArray(args));\n\n      if (__DEV__) {\n        Systrace.endEvent();\n      }\n    }\n  }], [{\n    key: \"spy\",\n    value: function spy(spyOrToggle) {\n      if (spyOrToggle === true) {\n        MessageQueue.prototype.__spy = function (info) {\n          console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + \" : \" + (\"\" + (info.module ? info.module + '.' : '') + info.method) + (\"(\" + JSON.stringify(info.args) + \")\"));\n        };\n      } else if (spyOrToggle === false) {\n        MessageQueue.prototype.__spy = null;\n      } else {\n        MessageQueue.prototype.__spy = spyOrToggle;\n      }\n    }\n  }]);\n\n  return MessageQueue;\n}();\n\nmodule.exports = MessageQueue;","map":{"version":3,"sources":["/Users/biofanat/Documents/GitHub/compost/newFrontendBo/node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js"],"names":["ErrorUtils","require","Systrace","deepFreezeAndThrowOnMutationInDev","invariant","stringifySafe","warnOnce","TO_JS","TO_NATIVE","MODULE_IDS","METHOD_IDS","PARAMS","MIN_TIME_BETWEEN_FLUSHES_MS","TRACE_TAG_REACT_APPS","DEBUG_INFO_LIMIT","MessageQueue","_lazyCallableModules","_queue","_successCallbacks","Map","_failureCallbacks","_callID","_lastFlush","_eventLoopStartTime","Date","now","_immediatesCallback","__DEV__","_debugInfo","_remoteModuleTable","_remoteMethodTable","callFunctionReturnFlushedQueue","bind","callFunctionReturnResultAndFlushedQueue","flushedQueue","invokeCallbackAndReturnFlushedQueue","module","method","args","__guard","__callFunction","result","cbID","__invokeCallback","__callImmediates","queue","length","name","factory","getValue","moduleID","methodID","params","onFail","onSucc","global","nativeCallSyncHook","processCallbacks","e","framesToPop","test","message","size","info","forEach","_","callID","debug","push","set","nativeTraceBeginAsyncFlow","isValidArgument","val","t","isFinite","Array","isArray","every","k","replacer","key","toString","JSON","stringify","nativeFlushQueueImmediate","counterEvent","__spy","type","methods","fn","__shouldPauseOnThrow","error","reportFatalError","DebuggerInternal","shouldPauseOnThrow","beginEvent","endEvent","moduleMethods","getCallableModule","apply","isSuccess","callback","get","profileName","delete","spyOrToggle","prototype","console","log","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst ErrorUtils = require('../vendor/core/ErrorUtils');\nconst Systrace = require('../Performance/Systrace');\n\nconst deepFreezeAndThrowOnMutationInDev = require('../Utilities/deepFreezeAndThrowOnMutationInDev');\nconst invariant = require('invariant');\nconst stringifySafe = require('../Utilities/stringifySafe');\nconst warnOnce = require('../Utilities/warnOnce');\n\nexport type SpyData = {\n  type: number,\n  module: ?string,\n  method: string | number,\n  args: any[],\n};\n\nconst TO_JS = 0;\nconst TO_NATIVE = 1;\n\nconst MODULE_IDS = 0;\nconst METHOD_IDS = 1;\nconst PARAMS = 2;\nconst MIN_TIME_BETWEEN_FLUSHES_MS = 5;\n\n// eslint-disable-next-line no-bitwise\nconst TRACE_TAG_REACT_APPS = 1 << 17;\n\nconst DEBUG_INFO_LIMIT = 32;\n\nclass MessageQueue {\n  _lazyCallableModules: {[key: string]: (void) => Object};\n  _queue: [number[], number[], any[], number];\n  _successCallbacks: Map<number, ?Function>;\n  _failureCallbacks: Map<number, ?Function>;\n  _callID: number;\n  _lastFlush: number;\n  _eventLoopStartTime: number;\n  _immediatesCallback: ?() => void;\n\n  _debugInfo: {[number]: [number, number]};\n  _remoteModuleTable: {[number]: string};\n  _remoteMethodTable: {[number]: $ReadOnlyArray<string>};\n\n  __spy: ?(data: SpyData) => void;\n\n  constructor() {\n    this._lazyCallableModules = {};\n    this._queue = [[], [], [], 0];\n    this._successCallbacks = new Map();\n    this._failureCallbacks = new Map();\n    this._callID = 0;\n    this._lastFlush = 0;\n    this._eventLoopStartTime = Date.now();\n    this._immediatesCallback = null;\n\n    if (__DEV__) {\n      this._debugInfo = {};\n      this._remoteModuleTable = {};\n      this._remoteMethodTable = {};\n    }\n\n    (this: any).callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(\n      this,\n    );\n    (this: any).callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(\n      this,\n    );\n    (this: any).flushedQueue = this.flushedQueue.bind(this);\n    (this: any).invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(\n      this,\n    );\n  }\n\n  /**\n   * Public APIs\n   */\n\n  static spy(spyOrToggle: boolean | ((data: SpyData) => void)) {\n    if (spyOrToggle === true) {\n      MessageQueue.prototype.__spy = info => {\n        console.log(\n          `${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` +\n            `${info.module ? info.module + '.' : ''}${info.method}` +\n            `(${JSON.stringify(info.args)})`,\n        );\n      };\n    } else if (spyOrToggle === false) {\n      MessageQueue.prototype.__spy = null;\n    } else {\n      MessageQueue.prototype.__spy = spyOrToggle;\n    }\n  }\n\n  callFunctionReturnFlushedQueue(\n    module: string,\n    method: string,\n    args: any[],\n  ): null | [Array<number>, Array<number>, Array<any>, number] {\n    this.__guard(() => {\n      this.__callFunction(module, method, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  callFunctionReturnResultAndFlushedQueue(\n    module: string,\n    method: string,\n    args: any[],\n  ): $TEMPORARY$array<?[Array<number>, Array<number>, Array<any>, number]> {\n    let result;\n    this.__guard(() => {\n      result = this.__callFunction(module, method, args);\n    });\n\n    return [result, this.flushedQueue()];\n  }\n\n  invokeCallbackAndReturnFlushedQueue(\n    cbID: number,\n    args: any[],\n  ): null | [Array<number>, Array<number>, Array<any>, number] {\n    this.__guard(() => {\n      this.__invokeCallback(cbID, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  flushedQueue(): null | [Array<number>, Array<number>, Array<any>, number] {\n    this.__guard(() => {\n      this.__callImmediates();\n    });\n\n    const queue = this._queue;\n    this._queue = [[], [], [], this._callID];\n    return queue[0].length ? queue : null;\n  }\n\n  getEventLoopRunningTime(): number {\n    return Date.now() - this._eventLoopStartTime;\n  }\n\n  registerCallableModule(name: string, module: Object) {\n    this._lazyCallableModules[name] = () => module;\n  }\n\n  registerLazyCallableModule(name: string, factory: void => Object) {\n    let module: Object;\n    let getValue: ?(void) => Object = factory;\n    this._lazyCallableModules[name] = () => {\n      if (getValue) {\n        module = getValue();\n        getValue = null;\n      }\n      return module;\n    };\n  }\n\n  getCallableModule(name: string): any | null {\n    const getValue = this._lazyCallableModules[name];\n    return getValue ? getValue() : null;\n  }\n\n  callNativeSyncHook(\n    moduleID: number,\n    methodID: number,\n    params: any[],\n    onFail: ?Function,\n    onSucc: ?Function,\n  ): any {\n    if (__DEV__) {\n      invariant(\n        global.nativeCallSyncHook,\n        'Calling synchronous methods on native ' +\n          'modules is not supported in Chrome.\\n\\n Consider providing alternative ' +\n          'methods to expose this method in debug mode, e.g. by exposing constants ' +\n          'ahead-of-time.',\n      );\n    }\n    this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n    try {\n      return global.nativeCallSyncHook(moduleID, methodID, params);\n    } catch (e) {\n      if (\n        typeof e === 'object' &&\n        e != null &&\n        typeof e.framesToPop === 'undefined' &&\n        /^Exception in HostFunction: /.test(e.message)\n      ) {\n        e.framesToPop = 2;\n      }\n      throw e;\n    }\n  }\n\n  processCallbacks(\n    moduleID: number,\n    methodID: number,\n    params: any[],\n    onFail: ?Function,\n    onSucc: ?Function,\n  ) {\n    if (onFail || onSucc) {\n      if (__DEV__) {\n        this._debugInfo[this._callID] = [moduleID, methodID];\n        if (this._callID > DEBUG_INFO_LIMIT) {\n          delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\n        }\n        if (this._successCallbacks.size > 500) {\n          const info = {};\n          this._successCallbacks.forEach((_, callID) => {\n            const debug = this._debugInfo[callID];\n            const module = debug && this._remoteModuleTable[debug[0]];\n            const method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n            info[callID] = {module, method};\n          });\n          warnOnce(\n            'excessive-number-of-pending-callbacks',\n            `Please report: Excessive number of pending callbacks: ${\n              this._successCallbacks.size\n            }. Some pending callbacks that might have leaked by never being called from native code: ${stringifySafe(\n              info,\n            )}`,\n          );\n        }\n      }\n      // Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit\n      // to indicate fail (0) or success (1)\n      // eslint-disable-next-line no-bitwise\n      onFail && params.push(this._callID << 1);\n      // eslint-disable-next-line no-bitwise\n      onSucc && params.push((this._callID << 1) | 1);\n      this._successCallbacks.set(this._callID, onSucc);\n      this._failureCallbacks.set(this._callID, onFail);\n    }\n    if (__DEV__) {\n      global.nativeTraceBeginAsyncFlow &&\n        global.nativeTraceBeginAsyncFlow(\n          TRACE_TAG_REACT_APPS,\n          'native',\n          this._callID,\n        );\n    }\n    this._callID++;\n  }\n\n  enqueueNativeCall(\n    moduleID: number,\n    methodID: number,\n    params: any[],\n    onFail: ?Function,\n    onSucc: ?Function,\n  ) {\n    this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n\n    this._queue[MODULE_IDS].push(moduleID);\n    this._queue[METHOD_IDS].push(methodID);\n\n    if (__DEV__) {\n      // Validate that parameters passed over the bridge are\n      // folly-convertible.  As a special case, if a prop value is a\n      // function it is permitted here, and special-cased in the\n      // conversion.\n      const isValidArgument = val => {\n        const t = typeof val;\n        if (\n          t === 'undefined' ||\n          t === 'null' ||\n          t === 'boolean' ||\n          t === 'string'\n        ) {\n          return true;\n        }\n        if (t === 'number') {\n          return isFinite(val);\n        }\n        if (t === 'function' || t !== 'object') {\n          return false;\n        }\n        if (Array.isArray(val)) {\n          return val.every(isValidArgument);\n        }\n        for (const k in val) {\n          if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\n            return false;\n          }\n        }\n        return true;\n      };\n\n      // Replacement allows normally non-JSON-convertible values to be\n      // seen.  There is ambiguity with string values, but in context,\n      // it should at least be a strong hint.\n      const replacer = (key, val) => {\n        const t = typeof val;\n        if (t === 'function') {\n          return '<<Function ' + val.name + '>>';\n        } else if (t === 'number' && !isFinite(val)) {\n          return '<<' + val.toString() + '>>';\n        } else {\n          return val;\n        }\n      };\n\n      // Note that JSON.stringify\n      invariant(\n        isValidArgument(params),\n        '%s is not usable as a native method argument',\n        JSON.stringify(params, replacer),\n      );\n\n      // The params object should not be mutated after being queued\n      deepFreezeAndThrowOnMutationInDev((params: any));\n    }\n    this._queue[PARAMS].push(params);\n\n    const now = Date.now();\n    if (\n      global.nativeFlushQueueImmediate &&\n      now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS\n    ) {\n      const queue = this._queue;\n      this._queue = [[], [], [], this._callID];\n      this._lastFlush = now;\n      global.nativeFlushQueueImmediate(queue);\n    }\n    Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\n    if (__DEV__ && this.__spy && isFinite(moduleID)) {\n      this.__spy({\n        type: TO_NATIVE,\n        module: this._remoteModuleTable[moduleID],\n        method: this._remoteMethodTable[moduleID][methodID],\n        args: params,\n      });\n    } else if (this.__spy) {\n      this.__spy({\n        type: TO_NATIVE,\n        module: moduleID + '',\n        method: methodID,\n        args: params,\n      });\n    }\n  }\n\n  createDebugLookup(\n    moduleID: number,\n    name: string,\n    methods: ?$ReadOnlyArray<string>,\n  ) {\n    if (__DEV__) {\n      this._remoteModuleTable[moduleID] = name;\n      this._remoteMethodTable[moduleID] = methods || [];\n    }\n  }\n\n  // For JSTimers to register its callback. Otherwise a circular dependency\n  // between modules is introduced. Note that only one callback may be\n  // registered at a time.\n  setImmediatesCallback(fn: () => void) {\n    this._immediatesCallback = fn;\n  }\n\n  /**\n   * Private methods\n   */\n\n  __guard(fn: () => void) {\n    if (this.__shouldPauseOnThrow()) {\n      fn();\n    } else {\n      try {\n        fn();\n      } catch (error) {\n        ErrorUtils.reportFatalError(error);\n      }\n    }\n  }\n\n  // MessageQueue installs a global handler to catch all exceptions where JS users can register their own behavior\n  // This handler makes all exceptions to be propagated from inside MessageQueue rather than by the VM at their origin\n  // This makes stacktraces to be placed at MessageQueue rather than at where they were launched\n  // The parameter DebuggerInternal.shouldPauseOnThrow is used to check before catching all exceptions and\n  // can be configured by the VM or any Inspector\n  __shouldPauseOnThrow(): boolean {\n    return (\n      // $FlowFixMe\n      typeof DebuggerInternal !== 'undefined' &&\n      DebuggerInternal.shouldPauseOnThrow === true // eslint-disable-line no-undef\n    );\n  }\n\n  __callImmediates() {\n    Systrace.beginEvent('JSTimers.callImmediates()');\n    if (this._immediatesCallback != null) {\n      this._immediatesCallback();\n    }\n    Systrace.endEvent();\n  }\n\n  __callFunction(module: string, method: string, args: any[]): any {\n    this._lastFlush = Date.now();\n    this._eventLoopStartTime = this._lastFlush;\n    if (__DEV__ || this.__spy) {\n      Systrace.beginEvent(`${module}.${method}(${stringifySafe(args)})`);\n    } else {\n      Systrace.beginEvent(`${module}.${method}(...)`);\n    }\n    if (this.__spy) {\n      this.__spy({type: TO_JS, module, method, args});\n    }\n    const moduleMethods = this.getCallableModule(module);\n    invariant(\n      !!moduleMethods,\n      'Module %s is not a registered callable module (calling %s)',\n      module,\n      method,\n    );\n    invariant(\n      !!moduleMethods[method],\n      'Method %s does not exist on module %s',\n      method,\n      module,\n    );\n    const result = moduleMethods[method].apply(moduleMethods, args);\n    Systrace.endEvent();\n    return result;\n  }\n\n  __invokeCallback(cbID: number, args: any[]) {\n    this._lastFlush = Date.now();\n    this._eventLoopStartTime = this._lastFlush;\n\n    // The rightmost bit of cbID indicates fail (0) or success (1), the other bits are the callID shifted left.\n    // eslint-disable-next-line no-bitwise\n    const callID = cbID >>> 1;\n    // eslint-disable-next-line no-bitwise\n    const isSuccess = cbID & 1;\n    const callback = isSuccess\n      ? this._successCallbacks.get(callID)\n      : this._failureCallbacks.get(callID);\n\n    if (__DEV__) {\n      const debug = this._debugInfo[callID];\n      const module = debug && this._remoteModuleTable[debug[0]];\n      const method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n      invariant(\n        callback,\n        `No callback found with cbID ${cbID} and callID ${callID} for ` +\n          (method\n            ? ` ${module}.${method} - most likely the callback was already invoked`\n            : `module ${module || '<unknown>'}`) +\n          `. Args: '${stringifySafe(args)}'`,\n      );\n      const profileName = debug\n        ? '<callback for ' + module + '.' + method + '>'\n        : cbID;\n      if (callback && this.__spy) {\n        this.__spy({type: TO_JS, module: null, method: profileName, args});\n      }\n      Systrace.beginEvent(\n        `MessageQueue.invokeCallback(${profileName}, ${stringifySafe(args)})`,\n      );\n    }\n\n    if (!callback) {\n      return;\n    }\n\n    this._successCallbacks.delete(callID);\n    this._failureCallbacks.delete(callID);\n    callback(...args);\n\n    if (__DEV__) {\n      Systrace.endEvent();\n    }\n  }\n}\n\nmodule.exports = MessageQueue;\n"]},"metadata":{},"sourceType":"script"}